<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blog on 작업실📦상자</title>
    <link>https://heojaehun.github.com/blog/</link>
    <description>Recent content in Blog on 작업실📦상자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Jaehun Heo (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 01 Feb 2024 09:50:57 +0900</lastBuildDate><atom:link href="https://heojaehun.github.com/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Main함수 테스트하기</title>
      <link>https://heojaehun.github.com/blog/golang-main-test/</link>
      <pubDate>Thu, 01 Feb 2024 09:50:57 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/golang-main-test/</guid>
      <description>일러두기 이 글은 &amp;lt;실무에 바로 쓰는 Go 언어 핸즈온 가이드&amp;gt;의 연습 문제 1.1을 다룹니다. 연습 문제를 풀어보면서 제가 어떻게 답을 작성했는지 설명하는 글입니다. 그리고 출제자의 답안과 비교하는 글입니다. 따라서 제가 작성한 코드는 썩 훌륭하지 않을 수 있습니다. 출제자의 의도를 충분히 만족하지 못한 부분도 있을 수 있습니다.
시간이 없다면 이 글의 앞부분을 건너뛰고 답안 코드를 바로 읽는 게 좋겠습니다. 마침 심심한데 다른 사람이 어떻게 문제를 풀었나 궁금하시다면, 바로 아래부터 읽어나가시면 됩니다.</description>
      <content:encoded><![CDATA[<h2 id="일러두기">일러두기</h2>
<p>이 글은 &lt;실무에 바로 쓰는 Go 언어 핸즈온 가이드&gt;의 연습 문제 1.1을 다룹니다.
연습 문제를 풀어보면서 제가 어떻게 답을 작성했는지 설명하는 글입니다.
그리고 출제자의 답안과 비교하는 글입니다.
따라서 제가 작성한 코드는 썩 훌륭하지 않을 수 있습니다.
출제자의 의도를 충분히 만족하지 못한 부분도 있을 수 있습니다.</p>
<p>시간이 없다면 이 글의 앞부분을 건너뛰고 답안 코드를 바로 읽는 게 좋겠습니다.
마침 심심한데 다른 사람이 어떻게 문제를 풀었나 궁금하시다면, 바로 아래부터 읽어나가시면 됩니다.</p>
<h2 id="연습-문제">연습 문제</h2>
<p>연습 문제는 책에서 다룬 예제 코드의 main 함수 테스트를 작성하는 것입니다.
예제 코드의 내용은 이렇습니다.</p>
<ol>
<li>애플리케이션을 실행할 때 숫자를 인자로 받습니다.</li>
<li>숫자가 아닌 인자를 받으면 애플리케이션 사용법을 출력하고 끝냅니다.</li>
<li>인자를 숫자로 받았다면 이름을 입력하라는 문자열이 출력됩니다.</li>
<li>사용자가 이름을 입력하고 나면, 인자로 넘긴 수만큼 이름이 반복 출력됩니다.</li>
</ol>
<p>책은 이 프로그램에서 만든 모든 함수의 테스트 코드를 작성하고 설명합니다.
단 한 가지, main 함수 테스트 코드만 빼고요.</p>
<h2 id="연습-문제-요구사항">연습 문제 요구사항</h2>
<p>연습 문제에는 아래와 같은 요구사항이 있습니다.</p>
<ul>
<li>애플리케이션을 빌드 해야한다.</li>
<li>다양한 이자를 주어 실행하고 표준 출력과 종료 코드를 확인해 테스트해야 한다.</li>
</ul>
<h2 id="나의-코드">나의 코드</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">  1</span><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="s">&#34;bytes&#34;</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="s">&#34;errors&#34;</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">
</span></span><span class="line"><span class="ln"> 14</span><span class="cl"><span class="kd">var</span> <span class="nx">usage</span> <span class="p">=</span> <span class="s">`Usage: ./application &lt;integer&gt; [-h|--help]
</span></span></span><span class="line"><span class="ln"> 15</span><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="ln"> 16</span><span class="cl"><span class="s">A greeter application wich prints the name you entered &lt;integer&gt; number of times.
</span></span></span><span class="line"><span class="ln"> 17</span><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl"><span class="kd">func</span> <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">        <span class="nx">appName</span> <span class="o">+=</span> <span class="s">&#34;.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">    <span class="nx">build</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">build</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Error building %s: %s&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Building...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">    <span class="nx">appName</span> <span class="o">:=</span> <span class="s">&#34;application&#34;</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">    <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Testing...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">        <span class="nx">num</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">        <span class="nx">name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">        <span class="nx">output</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">        <span class="nx">err</span>    <span class="kt">error</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Invalid number of arguments\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;strconv.Atoi: parsing \&#34;a\&#34;: invalid syntax\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Must specify a number greater than 0\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">            <span class="nx">num</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln"> 62</span><span class="cl"><span class="s">You didn&#39;t enter your name
</span></span></span><span class="line"><span class="ln"> 63</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">            <span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>  <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">            <span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Jaehun Heo\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln"> 70</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 71</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 72</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 73</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 74</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 75</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">        <span class="kd">var</span> <span class="nx">cmd</span> <span class="o">*</span><span class="nx">exec</span><span class="p">.</span><span class="nx">Cmd</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span> <span class="o">+</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span><span class="o">+</span><span class="nx">appName</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">        <span class="kd">var</span> <span class="nx">output</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">output</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted error: %v, Got: %v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span> <span class="o">!=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted stdout message to be: \n%v, \nGot: \n%v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span><span class="p">,</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">
</span></span><span class="line"><span class="ln">105</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Getting done...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">106</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Start unit tests...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">110</span><span class="cl">
</span></span><span class="line"><span class="ln">111</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="testmain으로-테스트-환경을-갖추기">TestMain()으로 테스트 환경을 갖추기</h2>
<p><code>TestMain()</code>을 이용해 테스트 전에 필요한 작업을 할 수 있습니다.
일반 테스트 함수와 다르게 매개변수 타입이 <code>*testing.M</code>인 점을 주의해야 합니다.
<code>TestMain()</code>의 구조는 대략 이렇습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="c1">// 이곳에서 단위 테스트 실행 전에 처리할 일을 구현
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="c1">// 단위 테스트 실행
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="c1">// 필요하다면 후처리 과정을 이곳에 구현
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="바이너리-파일-빌드">바이너리 파일 빌드</h2>
<p>책에서 지시한 첫 번째 요구사항은 바이너리 파일 빌드입니다.
그래서 <code>m.Run()</code>을 실행하기 전에 빌드하는 과정을 추가합니다.
빌드할 파일 이름을 입력받는 <code>buildApp()</code>이라는 함수를 만들었습니다.
여기서 코드를 실행하는 OS를 구분해 환경에 맞게 바이너리 파일을 빌드합니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="nx">appName</span> <span class="o">+=</span> <span class="s">&#34;.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nx">build</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">build</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Error building %s: %s&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="os-구분하기">OS 구분하기</h3>
<p>Linux나 macOS에서는 확장자가 없어도 바이너리 파일이 잘 실행됩니다.
하지만 Windows에서는 <code>.exe</code> 확장자가 붙어야 바이너리 파일을 실행할 수 있습니다.
<code>runtime</code> 패키지의 <code>GOOS</code> 변숫값으로 코드를 실행하고 있는 OS를 알 수 있습니다.</p>
<h3 id="빌드-명령-실행하기">빌드 명령 실행하기</h3>
<p><code>exec</code> 패키지를 이용하면 코드 안에서 외부 명령을 실행할 수 있습니다.
사용 방법은 간단합니다.
<code>exec</code>의 <code>Command()</code>함수에 실행할 명령과 인자를 넘깁니다.
그러면 <code>*Cmd</code>타입의 구조체가 만들어집니다.
이 <code>*Cmd</code>구조체에 포함된 <code>Run()</code>함수를 호출하면 명령이 실행됩니다.</p>
<p>참고로 <code>*Cmd</code>타입 구조체는 1회용입니다.
<code>Run()</code>이나 <code>Output()</code>으로 명령을 실행하고 나면 이 구조체를 <a href="https://pkg.go.dev/os/exec#Cmd">재사용할 수 없습니다.</a></p>
<h2 id="테스트-케이스">테스트 케이스</h2>
<p>앱을 실행할 때 입력할 인자, 이름, 예상되는 출력값, 에러 묶음을 정의합니다.
버그가 새어 나가지 않도록 빈틈없이 케이스를 만듭니다.
저는 5가지 경우가 있을 수 있다고 생각하여 아래처럼 작성하였습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nx">num</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nx">name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nx">output</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nx">err</span>    <span class="kt">error</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Invalid number of arguments\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;strconv.Atoi: parsing \&#34;a\&#34;: invalid syntax\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Must specify a number greater than 0\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">            <span class="nx">num</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="s">You didn&#39;t enter your name
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">            <span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>  <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">            <span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Jaehun Heo\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">38</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">41</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">    
</span></span><span class="line"><span class="ln">45</span><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><h2 id="테스트-실행">테스트 실행</h2>
<p>바이너리 파일을 빌드할 때와 같이 <code>exec.Comman()</code>로 앱을 실행할 준비를 합니다.
인자가 있는 경우와 없는 경우가 있어 구분 지었습니다.</p>
<p>준비한 테스트 케이스대로 입력하면 기대한 출력값이 나오는지 확인해야 합니다.
그러려면 실행할 명령의 표준 입력과 표준 출력을 가로채야 합니다.
저는 이 과정에서 해결할 방법을 몰라 한참을 헤맸었습니다.</p>
<p>간단하게도 <code>*Cmd</code> 구조체에 준비된 인터페이스를 이용하면 됩니다.
<code>Stdin</code> 인터페이스에 준비한 입력을 넣습니다.
그리고 <code>Stdout</code> 인터페이스에 버퍼를 연결합니다.</p>
<p>이제 실행해야죠.
<code>cmd.Run()</code>으로 명령을 실행한 뒤 출력 버퍼와 에러가 예상과 같은지 확인합니다.
만약 테스트에 실패한다면 에러 문구를 출력하고 <code>os.Exit(1)</code>로 테스트를 끝냅니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="kd">var</span> <span class="nx">cmd</span> <span class="o">*</span><span class="nx">exec</span><span class="p">.</span><span class="nx">Cmd</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span> <span class="o">+</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span><span class="o">+</span><span class="nx">appName</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="kd">var</span> <span class="nx">output</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">output</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted error: %v, Got: %v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span> <span class="o">!=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted stdout message to be: \n%v, \nGot: \n%v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span><span class="p">,</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span></span></span></code></pre></div><h2 id="테스트-뒷-마무리">테스트 뒷 마무리</h2>
<p>여기서는 테스트한 바이너리 파일을 지우는 일을 합니다.
굳이 지우지 않아도 됩니다.
하지만 저는 테스트는 테스트일 뿐이라는 생각으로 지우기로 했습니다.</p>
<p>한편으로는 바이너리 파일을 그대로 두는 것이 더 낫지 않을까도 생각합니다.
테스트를 거친 결과물임을 보장하는 것이니까요.
테스트에 실패했을 경우에만 지우는 것도 방법이겠네요.</p>
<p>그다음은 단위 테스트를 할 차례입니다.
<code>m.Run()</code>으로 실행할 수 있습니다.
<code>m</code>이라는 변수가 갑자기 어디서 튀어나왔나 싶지요.
이 글 초반에 설명한 <code>TestMain()</code>함수의 매개변수입니다.</p>
<p><code>m.Run()</code>은 모든 단위 테스트를 통과하면 0을, 실패하면 1을 반환합니다.
실행 결괏값을 <code>os.Exit()</code>에 넘겨주고 모든 테스트를 끝마칩니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">1</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Getting done...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Start unit tests...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span></span></span></code></pre></div><h2 id="실행-결과">실행 결과</h2>
<p>작성한 테스트 코드를 <code>go test -v</code>명령으로 실행해 봅니다.
결과는 아래와 같습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln"> 1</span><span class="cl">$ go <span class="nb">test</span> -v
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">-&gt; Building...
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">-&gt; Testing...
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">-&gt; Getting <span class="k">done</span>...
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">-&gt; Start unit tests...
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="o">===</span> RUN   TestParseArgs
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">--- PASS: TestParseArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="o">===</span> RUN   TestRunCmd
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">--- PASS: TestRunCmd <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="o">===</span> RUN   TestValidateArgs
</span></span><span class="line"><span class="ln">11</span><span class="cl">--- PASS: TestValidateArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">13</span><span class="cl">ok      practical-go/chap01/manual-parse        1.853s</span></span></code></pre></div><p>바이너리 파일을 빌드하고 애플리케이션 실행 테스트도 통과했습니다.
연습 문제를 풀기 전에 작성해 둔 단위 테스트들도 잘 실행되었고요.
모든 요구사항을 만족한 것 같습니다.</p>
<p>여기까지 왔을 때 기분이 꽤 뿌듯했었지요.
그런데 답안 코드를 살펴보고 나니 역시나 제 것은 아주 허술하구나 싶었습니다.
이다음부터는 답안 코드를 분석해 보겠습니다.</p>
<h2 id="답안-코드">답안 코드</h2>
<p>제가 작성한 것과 답안 코드의 차이는 두 가지라고 생각합니다.</p>
<ul>
<li>앱 실행 테스트를 위한 전용 테스트 함수(<code>TestXXXX(t *testing.T)</code>)를 만듦</li>
<li>테스트에 타임아웃 컨텍스트를 추가함</li>
</ul>
<h3 id="앱-실행-테스트도-단위-테스트-중-하나">앱 실행 테스트도 단위 테스트 중 하나</h3>
<p>저는 <code>TestMain()</code> 함수 안에 앱 실행 테스트를 구현했습니다.
그리고 단위 테스트를 따로 실행하도록 했지요.
그래서 Go 언어의 단위 테스트 모음에 앱 실행 테스트는 포함되지 않았습니다.</p>
<p>한편, 답안에는 앱 실행 테스트도 하나의 단위 테스트로 구현되어 있었습니다.</p>
<p>혹시나 그렇게 하면 main함수도 coverage에 포함되나 궁금했습니다.
그래서 실행해본 결과는 &lsquo;포함되지 않는다&rsquo;입니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">$ go <span class="nb">test</span> -cover
</span></span><span class="line"><span class="ln">2</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">3</span><span class="cl">coverage: 71.2% of statements
</span></span><span class="line"><span class="ln">4</span><span class="cl">ok      practical-go/chap01/manual-parse        0.262s</span></span></code></pre></div><p>그럼에도 테스트와 준비 과정을 명확히 나눌 수 있는 것은 장점입니다.
훨씬 깔끔해 보입니다.
테스트 도구가 출력하는 PASS/FAIL 결과도 알아서 뽑아주는 것도 좋고요.</p>
<h3 id="타임아웃-컨텍스트를-더해서-우아하게-만들기">타임아웃 컨텍스트를 더해서 우아하게 만들기</h3>
<p>답안 코드는 빌드 과정과 앱 실행 테스트에 타임아웃 컨텍스트를 추가했습니다.
타임아웃 컨텍스트는 교착 상태에 빠지거나 실행이 지연될 때를 위한 장치입니다.
아무리 늦어도 n 시간 안에는 테스트 결과가 나오도록 하는 우아한 방식입니다.</p>
<p>사실 컨텍스트 기능은 책에서 이 연습 문제 이후에 설명된 내용이라 사용해 볼 생각을 못했습니다.
저자가 반칙을 썼네요!
그래도 유용해 보이는 기능을 답안에 사용해 주어서 덕분에 덤으로 배운 느낌입니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">  1</span><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="s">&#34;bytes&#34;</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    <span class="s">&#34;path&#34;</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">    <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">    <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">    <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="ln"> 15</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl"><span class="kd">var</span> <span class="nx">binaryName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">        <span class="nx">binaryName</span> <span class="p">=</span> <span class="s">&#34;manual-parse-app.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">        <span class="nx">binaryName</span> <span class="p">=</span> <span class="s">&#34;manual-parse-app&#34;</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">    <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">    <span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">    <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">CommandContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">    <span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error removing built binary: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">    <span class="p">}()</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">
</span></span><span class="line"><span class="ln"> 42</span><span class="cl"><span class="kd">func</span> <span class="nf">TestApplication</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">    <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">    <span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">    <span class="nx">curDir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getwd</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">    <span class="nx">binaryPath</span> <span class="o">:=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">curDir</span><span class="p">,</span> <span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="nx">binaryPath</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">        <span class="nx">args</span>                <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        <span class="nx">input</span>               <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">        <span class="nx">expectedOutputLines</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">        <span class="nx">expectedExitCode</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">                <span class="s">&#34;Invalid number of arguments&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Usage: %s &lt;integer&gt; [-h|-help]&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">                <span class="s">&#34;A greeter application which prints the name you entered &lt;integer&gt; number of times.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;-h&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">                <span class="s">&#34;Must specify a number greater than 0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Usage: %s &lt;integer&gt; [-h|-help]&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">                <span class="s">&#34;A greeter application which prints the name you entered &lt;integer&gt; number of times.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>                <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span>    <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;2&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">            <span class="nx">input</span><span class="p">:</span>            <span class="s">&#34;jane doe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">                <span class="s">&#34;Your name please? Press the Enter key when done.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">                <span class="s">&#34;Nice to meet you jane doe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">    <span class="nx">byteBuf</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Logf</span><span class="p">(</span><span class="s">&#34;Executing:%v %v\n&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">        <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">CommandContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="nx">byteBuf</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">input</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">            <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected application to exit without an error. Got: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">108</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">        <span class="k">if</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">ProcessState</span><span class="p">.</span><span class="nf">ExitCode</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">111</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="nx">byteBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected application to have exit code: %v. Got: %v&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span><span class="p">,</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">ProcessState</span><span class="p">.</span><span class="nf">ExitCode</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">113</span><span class="cl">
</span></span><span class="line"><span class="ln">114</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">115</span><span class="cl">
</span></span><span class="line"><span class="ln">116</span><span class="cl">        <span class="nx">output</span> <span class="o">:=</span> <span class="nx">byteBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">117</span><span class="cl">        <span class="nx">lines</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">output</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">118</span><span class="cl">        <span class="k">for</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">119</span><span class="cl">            <span class="k">if</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">120</span><span class="cl">                <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected output line to be:%v, Got:%v&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span><span class="p">[</span><span class="nx">num</span><span class="p">],</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">num</span><span class="p">])</span>
</span></span><span class="line"><span class="ln">121</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">122</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">123</span><span class="cl">        <span class="nx">byteBuf</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">124</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">125</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="실행-결과-답안-코드">실행 결과 (답안 코드)</h2>
<p>실행해 보니 예상대로 앱 실행 테스트도 Go 언어의 단위 테스트 중의 하나로 처리되는 것으로 보입니다.
앱 실행 테스트의 경우 테스트 케이스를 실행할 때마다 로그를 남겨두었네요.
어떤 인자와 함께 실행했을 때 에러가 났는지 금방 파악할 수 있는 좋은 습관인 것 같습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln"> 1</span><span class="cl">$ go <span class="nb">test</span> -v
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="o">===</span> RUN   TestApplication
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    main_test.go:50: /home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>-h<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>a<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>2<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">--- PASS: TestApplication <span class="o">(</span>0.01s<span class="o">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="o">===</span> RUN   TestParseArgs
</span></span><span class="line"><span class="ln">10</span><span class="cl">--- PASS: TestParseArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="o">===</span> RUN   TestRunCmd
</span></span><span class="line"><span class="ln">12</span><span class="cl">--- PASS: TestRunCmd <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="o">===</span> RUN   TestValidateArgs
</span></span><span class="line"><span class="ln">14</span><span class="cl">--- PASS: TestValidateArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">16</span><span class="cl">ok      practical-go/chap01/manual-parse        0.239s</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201221</title>
      <link>https://heojaehun.github.com/blog/til_201221/</link>
      <pubDate>Tue, 22 Dec 2020 00:05:43 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201221/</guid>
      <description>XML, JSON, YAML Hugo를 쓸 때마다 궁금했던 것이 YAML 양식의 데이터 표현법이다. Hugo를 이용해서 새로운 글을 생성하면 자동으로 글 상단에 YAML 형식으로 글의 제목, 생성 시각, draft 여부가 적혀져 있다. 보기에 어려워 보이지 않아 따로 형식에 대해 알아보지 않고 썼었다. 그래도 이해하고 정리하는 게 필요하지 않을까 해서 자료를 찾아보았고 아래와 같이 정리하였다. YAML에 대한 모든 내용을 정리하지는 않았고 흔히 알고 있는 XML, JSON과 비교하여 어떤 차이가 있는지 알아보았다. 참고 페이지 (인프런 질문 게시판)</description>
      <content:encoded><![CDATA[<h2 id="xml-json-yaml">XML, JSON, YAML</h2>
<p>Hugo를 쓸 때마다 궁금했던 것이 YAML 양식의 데이터 표현법이다. Hugo를 이용해서 새로운 글을 생성하면 자동으로 글 상단에 YAML 형식으로 글의 제목, 생성 시각, draft 여부가 적혀져 있다. 보기에 어려워 보이지 않아 따로 형식에 대해 알아보지 않고 썼었다. 그래도 이해하고 정리하는 게 필요하지 않을까 해서 자료를 찾아보았고 아래와 같이 정리하였다. YAML에 대한 모든 내용을 정리하지는 않았고 흔히 알고 있는 XML, JSON과 비교하여 어떤 차이가 있는지 알아보았다. <a href="https://www.inflearn.com/questions/16184">참고 페이지 (인프런 질문 게시판)</a></p>
<h3 id="xml">XML</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nt">&lt;key1&gt;</span>value1<span class="nt">&lt;/key1&gt;</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="nt">&lt;object1&gt;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">	<span class="nt">&lt;key2&gt;</span>value2<span class="nt">&lt;/key2&gt;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="nt">&lt;/object1&gt;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="nt">&lt;object2&gt;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">	<span class="nt">&lt;array&gt;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">		<span class="nt">&lt;key3&gt;</span>value3<span class="nt">&lt;/key3&gt;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">		<span class="nt">&lt;key4&gt;</span>value4<span class="nt">&lt;/key4&gt;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">	<span class="nt">&lt;/array&gt;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="nt">&lt;/object2&gt;</span></span></span></code></pre></div><h3 id="json">JSON</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">	<span class="nt">&#34;key1&#34;</span><span class="p">:</span> <span class="s2">&#34;value1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">	<span class="nt">&#34;object1&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">		<span class="nt">&#34;key2&#34;</span><span class="p">:</span> <span class="s2">&#34;value2&#34;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">	<span class="p">},</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">	<span class="nt">&#34;object2&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">		<span class="nt">&#34;array&#34;</span><span class="p">:[</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">			<span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">				<span class="nt">&#34;key3&#34;</span><span class="p">:</span> <span class="s2">&#34;value3&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">				<span class="nt">&#34;key4&#34;</span><span class="p">:</span> <span class="s2">&#34;value4&#34;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">		<span class="p">]</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="yaml">YAML</h3>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="ln">1</span><span class="cl"><span class="nt">key1</span><span class="p">:</span><span class="w"> </span><span class="l">value1</span><span class="w">
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="w"></span><span class="nt">object1</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="w">  </span><span class="nt">key2</span><span class="p">:</span><span class="w"> </span><span class="l">value2</span><span class="w">
</span></span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="w"></span><span class="nt">object2</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">5</span><span class="cl"><span class="w">  </span><span class="nt">array</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="ln">6</span><span class="cl"><span class="w">  </span>- <span class="nt">key3</span><span class="p">:</span><span class="w"> </span><span class="l">value3</span><span class="w">
</span></span></span><span class="line"><span class="ln">7</span><span class="cl"><span class="w">    </span><span class="nt">key4</span><span class="p">:</span><span class="w"> </span><span class="l">value4</span></span></span></code></pre></div><p>그런데 여기서 드는 의문! Hugo가 생성하는 파일의 YAML 형식 데이터에는 배열 표현이 위의 것과 다르다. 분명 대괄호 &ldquo;[]&ldquo;를 사용했다. 이와 관련한 답은 위키피디아의 <a href="https://ko.wikipedia.org/wiki/YAML">YAML</a> 페이지에서 찾을 수 있었다. 배열을 한 줄로 쓸 때는 대괄호로 요소를 묶고, 각 요소는 쉼표로 구분하면 된다.</p>
<p>이 외에도 YAML에는 몇 가지 양식이 있어서 상황에 맞게 쓸 수 있는 듯 하다. 그러나 지금 필요한 것만 배우기로 하고 나머지는 다음 기회에 알아보기로 했다.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201219</title>
      <link>https://heojaehun.github.com/blog/til_201219/</link>
      <pubDate>Sun, 20 Dec 2020 01:01:37 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201219/</guid>
      <description>[책] 개발자의 글쓰기 (p.254 ~ 끝) 기술 블로그의 4종류 저: 직접 경험하고 실험한 과정이나 결과 술: 어떤 것을 분석하여 의미를 풀이하고 해석한 것 편: 산만하고 복잡한 자료를 풀이하고 해석한 것 집: 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것 순서를 요약하여 쓰기 편: 시간 순서로 일어난 일이나 해야 할 일을 쓴 것 프로그램 설치, 설정 순서, 개발 방법, 튜토리얼, 컨퍼런스 후기 등 처음부터 끝까지 나열하기만 하는 것이 아니라 적절히 단계를 나눠서 설명해야 한다.</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p254--끝">[책] 개발자의 글쓰기 (p.254 ~ 끝)</h2>
<h3 id="기술-블로그의-4종류">기술 블로그의 4종류</h3>
<ul>
<li>저: 직접 경험하고 실험한 과정이나 결과</li>
<li>술: 어떤 것을 분석하여 의미를 풀이하고 해석한 것</li>
<li>편: 산만하고 복잡한 자료를 풀이하고 해석한 것</li>
<li>집: 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것</li>
</ul>
<h4 id="순서를-요약하여-쓰기">순서를 요약하여 쓰기</h4>
<ul>
<li>편: 시간 순서로 일어난 일이나 해야 할 일을 쓴 것</li>
<li>프로그램 설치, 설정 순서, 개발 방법, 튜토리얼, 컨퍼런스 후기 등</li>
<li>처음부터 끝까지 나열하기만 하는 것이 아니라 적절히 단계를 나눠서 설명해야 한다.
<ul>
<li>나눠진 단계가 목차가 된다.</li>
</ul>
</li>
</ul>
<h4 id="자료를-모아-핵심을-엮어서-쓰기">자료를 모아 핵심을 엮어서 쓰기</h4>
<ul>
<li>명령어 모음, 팁, 00 가지 규칙 같은 글</li>
<li>&lsquo;집&rsquo;이라고 해서 꼭 여러 사람의 견해나 자료를 모아야만 하는 것은 아니다.
<ul>
<li>자신의 견해를 몇 가지 나열해 정리하는 것도 방법이다.</li>
</ul>
</li>
<li>기술 블로그를 처음 쓰는 개발자라면 가장 쉽게 도전할 수 있는 형식의 글이다.
<ul>
<li>게다가 조회 수도 높다고 한다.</li>
</ul>
</li>
</ul>
<h3 id="기업의-기술-블로그-운영-팁">기업의 기술 블로그 운영 팁</h3>
<ul>
<li>기술 블로그를 운영하려는 기업이 늘어나고 있다.
<ul>
<li>적합한 개발자 채용에 도움을 준다.</li>
<li>개발 과정에 생긴 노하우를 체계적으로 축적할 수 있다.</li>
<li>개발자 스스로 공부하게 만든다.</li>
</ul>
</li>
<li>협업해서 글쓰기, 짝 글쓰기
<ul>
<li>두 명이 하나의 글을 함께 쓴다.</li>
<li>독자의 관점에서 글을 쓸 수 있어 완성도가 높아진다.</li>
<li>더 보편적인 지식 체계를 만들 수 있다. 따라서 다른 개발자에게 쉽게 전파할 수 있다.</li>
<li>자연스럽게 팀 회고를 할 수 있다.</li>
<li>같이 쓰면 글쓰기에 대한 부담이 가벼워진다.</li>
</ul>
</li>
<li>짝 글쓰기를 하는 방법: 짝 프로그래밍(Pair programming)에서 쓰는 방법을 사용한다.
<ul>
<li>Driver &amp; Navigator: 작성자와 검토자</li>
<li>Coder &amp; Adviser: 작성자와 조언자</li>
<li>Verbalizer &amp; Listener: 소리 내 읽는 사람과 귀로 듣는 사람</li>
<li>Ping-Pong: 두 명이 번갈아 가며 글쓰기</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201218</title>
      <link>https://heojaehun.github.com/blog/til_201218/</link>
      <pubDate>Fri, 18 Dec 2020 23:53:41 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201218/</guid>
      <description>[책] 개발자의 글쓰기 (p.220 ~ p.253) 고객의 요구사항은 변할 수밖에 없다. 고객은 자기가 원하는 제품이 정확히 뭔지 모른다. 개발자는 고객에게서 요구사항을 받아 분석하는 게 아니다. 개발자가 요구사항을 제시해서 고객이 선택하게 해야 한다. 고객의 요구사항은 끊임없이 변할 수밖에 없고 개발자는 이에 대응할 수 있어야 한다. 요구사항을 구현하고 나면 가능한 한 곧바로 고객에게 검수받아야 한다. 그래야 고객의 변덕을 줄일 수 있다. 분석-설계-구현-테스트-검수 구현 직전 고객의 요구사항을 점검하고 개발이 끝나면 곧바로 검수받는다. 고객의 만족도 높이기 고객의 요구사항에도 급이 있다.</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p220--p253">[책] 개발자의 글쓰기 (p.220 ~ p.253)</h2>
<h3 id="고객의-요구사항은-변할-수밖에-없다">고객의 요구사항은 변할 수밖에 없다.</h3>
<ul>
<li>고객은 자기가 원하는 제품이 정확히 뭔지 모른다.</li>
<li>개발자는 고객에게서 요구사항을 받아 분석하는 게 아니다.</li>
<li>개발자가 요구사항을 제시해서 고객이 선택하게 해야 한다.</li>
<li>고객의 요구사항은 끊임없이 변할 수밖에 없고 개발자는 이에 대응할 수 있어야 한다.</li>
<li>요구사항을 구현하고 나면 가능한 한 곧바로 고객에게 검수받아야 한다.</li>
<li>그래야 고객의 변덕을 줄일 수 있다.</li>
<li>분석-설계-구현-테스트-검수</li>
<li>구현 직전 고객의 요구사항을 점검하고 개발이 끝나면 곧바로 검수받는다.</li>
</ul>
<h3 id="고객의-만족도-높이기">고객의 만족도 높이기</h3>
<ul>
<li>고객의 요구사항에도 급이 있다.</li>
<li>가장 급이 높은 요구사항부터 개발하는 것이 고객 만족도를 높이는 데 좋다.</li>
</ul>
<h4 id="카노-모델">카노 모델</h4>
<ul>
<li>기본 기능은 모든 요구를 충족시켜도 추가되는 만족도가 없다.</li>
<li>기능의 성능은 요구를 충족시키는 만큼 만족도가 오른다.</li>
<li>기대하지 않았던 특별한 기능은 충족하지 못해도 불만족스럽지 않으며, 만약 충족하면 크게 만족한다.</li>
</ul>
<h3 id="기술-블로그-쉽게-쓰는-방법">기술 블로그 쉽게 쓰는 방법</h3>
<ul>
<li>학교에서 썼던 글과 기술 블로그에 쓰는 글은 다르다.
<ul>
<li>기술 블로그에 쓰는 글은 설명문이나 논설문이 아니다.</li>
</ul>
</li>
<li>있는 그대로를 담담하게 풀어쓰는 글이다.</li>
<li>독자의 수준 폭도 넓어서 모두를 만족시키는 글을 쓰기란 불가능하다.</li>
<li>소재 우선 글쓰기
<ul>
<li>그저 일어난 일을 적는다.</li>
<li>일상을 다룬 수필이나 에피소드에 가깝다.</li>
</ul>
</li>
<li>자기 수준 글쓰기
<ul>
<li>쉽게 설명하기 위해서 비유법을 쓰는데, 비유법은 개념을 이해하는 데 한계가 있다.</li>
<li>전문 용어를 굳이 설명하려 하지 않아도 된다. 필요하다면 설명된 페이지를 링크 걸어놓자.</li>
<li>개발자 자신이 쓰려는 글의 본질에 집중해야 한다.</li>
</ul>
</li>
<li>재미있는 글쓰기
<ul>
<li>위키피디아보다 나무위키가 읽는 재미가 있다.</li>
<li>좋은 기술 블로그는 개발자의 경험에서 우러나오는 내용을 적절한 글쓰기 기교로 녹여낸 것이다.</li>
</ul>
</li>
</ul>
<h3 id="기술-블로그의-4종류">기술 블로그의 4종류</h3>
<ul>
<li>저: 직접 경험하고 실험한 과정이나 결과</li>
<li>술: 어떤 것을 분석하여 의미를 풀이하고 해석한 것</li>
<li>편: 산만하고 복잡한 자료를 풀이하고 해석한 것</li>
<li>집: 여러 사람의 견해나 흩어진 자료를 한데 모아 정리한 것</li>
</ul>
<h4 id="개발기는-목차를-잘-잡고-본문부터-쓰기">개발기는 목차를 잘 잡고 본문부터 쓰기</h4>
<ul>
<li>목차는 1차원 단방향이지만 개발자의 개발 경험은 2차원이라 풀어쓰기 쉽지 않다.</li>
<li>성공한 방법을 우선 쓰고, 필요하다면 실패 경험을 뒤에 서술한다.</li>
<li>네이버 기술 블로그를 참고하면 좋다.</li>
<li>글은 본문부터 쓰는 게 쉽다. 머리말은 다 쓰고 난 뒤, 글을 올릴 때 생각나는 대로 간단히 쓴다.</li>
</ul>
<h4 id="원전을-비교하고-실험해-풀이해서-쓰기">원전을 비교하고 실험해 풀이해서 쓰기</h4>
<ul>
<li>&lsquo;술&rsquo;에 해당하는 글
<ul>
<li>새로운 기술을 자세하게 또는 비유해 설명한 것</li>
<li>비슷한 용어를 비교해 풀이한 것</li>
<li>에러 해결 방법 등</li>
</ul>
</li>
<li>원전의 내용을 가지고 비교 분석하는 글이 대표적이다.</li>
<li>개발자가 경전을 쓰는 게 아니라 자기 방식대로 풀이하는 글이다.</li>
</ul>
<h2 id="python-이것저것">[Python] 이것저것</h2>
<h3 id="파일이나-디렉터리-존재-유무-확인">파일이나 디렉터리 존재 유무 확인</h3>
<p><code>os</code> 모듈에 포함된 <code>access()</code> 함수를 이용한다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">access</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span></span></span></code></pre></div><p>여기서 mode 플래그에는 네 가지 값이 올 수 있다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">F_OK</span>		<span class="c1"># path 존재 여부</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">R_OK</span>		<span class="c1"># 읽기 가능 여부</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">W_OK</span>		<span class="c1"># 쓰기 가능 여부</span>
</span></span><span class="line"><span class="ln">4</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">X_OK</span>		<span class="c1"># 실행 가능 여부</span></span></span></code></pre></div><p>파일 존재 유무를 확인 하기위해 <code>os.F_OK</code>를 사용하였다.</p>
<h3 id="파일-이동">파일 이동</h3>
<p><code>os</code> 모듈에 포함된 <code>rename()</code> 함수를 이용한다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">os</span><span class="o">.</span><span class="n">rename</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span></span></span></code></pre></div><p>혹은 <code>shutil</code> 모듈에 포함된 <code>move()</code> 함수를 이용한다. <code>shutil</code> 패키지는 파이썬 기본 모듈이다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="ln">1</span><span class="cl"><span class="kn">import</span> <span class="nn">shutil</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">
</span></span><span class="line"><span class="ln">3</span><span class="cl"><span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">)</span></span></span></code></pre></div><p><code>shutil</code>이 뭔가 찾아봤더니 파일 복사와 삭제 등을 지원하는 함수가 포함된 &lsquo;고수준 파일 연산&rsquo; 모듈이라고 한다. <a href="https://docs.python.org/ko/3/library/shutil.html#module-shutil">링크</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201217</title>
      <link>https://heojaehun.github.com/blog/til_201217/</link>
      <pubDate>Fri, 18 Dec 2020 00:49:21 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201217/</guid>
      <description>[책] 개발자의 글쓰기 (p.193 ~ p.219) 그림과 함께 설명할 때 그림에 번호를 매기며 번호 하나마다 한줄 씩 설명을 다는 방식은 읽기 불편하다. 글과 그림을 왔다갔다하며 봐야하기 때문이다. 그럴때는 글을 최대한 줄이고 글 속에 번호를 포함시키는 것이 좋다. 예시: 푸시 서비스를 설정하려면 (1)설정 &amp;gt; (2)푸시 화면에서 (3)푸시 사용을 켜고, (4)인증서를 업로드한 뒤 (5)비밀번호를 설정하여 (6)저장합니다. 서사 서사가 너무 자세하거나 너무 없어도 글을 읽고 이해하기 어렵다. 독자 수준에 맞추어 글의 자세한 정도를 결정해야한다.</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p193--p219">[책] 개발자의 글쓰기 (p.193 ~ p.219)</h2>
<h3 id="그림과-함께-설명할-때">그림과 함께 설명할 때</h3>
<ul>
<li>그림에 번호를 매기며 번호 하나마다 한줄 씩 설명을 다는 방식은 읽기 불편하다. 글과 그림을 왔다갔다하며 봐야하기 때문이다.</li>
<li>그럴때는 글을 최대한 줄이고 글 속에 번호를 포함시키는 것이 좋다.
<ul>
<li>예시: 푸시 서비스를 설정하려면 (1)설정 &gt; (2)푸시 화면에서 (3)푸시 사용을 켜고, (4)인증서를 업로드한 뒤 (5)비밀번호를 설정하여 (6)저장합니다.</li>
</ul>
</li>
</ul>
<h3 id="서사">서사</h3>
<ul>
<li>서사가 너무 자세하거나 너무 없어도 글을 읽고 이해하기 어렵다.</li>
<li>독자 수준에 맞추어 글의 자세한 정도를 결정해야한다. 하지만 쉬운 일이 아니다.</li>
<li>개발문서를 시작하기 전에 기본적인 수준을 맞춰놓는 것도 방법이다.
<ul>
<li>&lsquo;시작하기 전에&rsquo;나 &lsquo;개요&rsquo; 항목에서 기본 개념을 설명한다.</li>
</ul>
</li>
<li>서사가 길 때는 단계를 만들어 나누어야 한다.
<ul>
<li>각 단계마다 이뤄야 하는 목표를 글로 분명히 표현해야 한다.</li>
</ul>
</li>
<li>단계는 글의 목차가 된다.</li>
</ul>
<h3 id="수주를-돕는-si-제안서-쓰기">수주를 돕는 SI 제안서 쓰기</h3>
<ul>
<li>시스템 구성도의 본질은 그림이 아니다.</li>
<li>제안요청서 분석
<ul>
<li>제안요청서에는 시스템이 구성된 이유와 배경, 상황과 답이 담겨있다.</li>
<li>개발자는 전체적인 그림을 이해하고 기술 부문을 작성해야 한다.</li>
</ul>
</li>
<li>논리적 완결성
<ul>
<li>누구나 제안서를 소설 읽듯이 첫 글자부터 순서대로 읽지 않는다.</li>
<li>심사위원은 자기와 관련이 있거나 관심 항목만 골라 읽는다.</li>
</ul>
</li>
<li>제안서의 시작은 문제가 아니라 고객의 문제 인식이다.
<ul>
<li>문제가 있는 것과 문제를 해결하려는 의지가 있는 것은 다르다.</li>
</ul>
</li>
<li>제안사의 문제 해결 능력에 따라서도 제안하는 방식이 달라져야 한다.
<ul>
<li>고객사의 문제 인식과 맞물려서 전략을 짜야한다.</li>
</ul>
</li>
</ul>
<h4 id="문제-인식-상--해결-능력-상---경쟁사와-비교하여-제안하기">문제 인식: 상 / 해결 능력: 상 - 경쟁사와 비교하여 제안하기</h4>
<ul>
<li>적극적으로 경쟁사와 비교를 통해 강점을 들어내야 한다.</li>
</ul>
<h4 id="문제-인식-상--해결-능력-하---일단-동감하고-다른-방안을-제시하기">문제 인식: 상 / 해결 능력: 하 - 일단 동감하고 다른 방안을 제시하기</h4>
<ul>
<li>할 수 없는 일을 할 수 있다고 말해서는 절대로 안된다.</li>
<li>문제를 해결하는 방법이 한가지만 있을 수는 없다.</li>
<li>논리적으로 경쟁사의 방법의 허점을 파고들고 제안사의 해결법이 돋보이게 설득해야한다.</li>
</ul>
<h4 id="문제-인식-하--해결-능력-상---고객이-문제를-중대하게-인식하게-만들기">문제 인식: 하 / 해결 능력: 상 - 고객이 문제를 중대하게 인식하게 만들기</h4>
<ul>
<li>고객이 사소하게 생각하지만 경쟁사에 비해 문제를 탁월하게 잘 할 수 있을 때 사용하는 방법이다.</li>
</ul>
<h4 id="문제-인식-하--해결-능력-하">문제 인식: 하 / 해결 능력: 하</h4>
<ul>
<li>경쟁사가 해당 문제를 강점으로 들고나왔을 때 대처할 수 있어야 한다.</li>
<li>사소한 문제에 대해서도 예상 질문과 답을 준비해두는 것이 좋다.</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201216</title>
      <link>https://heojaehun.github.com/blog/til_201216/</link>
      <pubDate>Thu, 17 Dec 2020 00:14:08 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201216/</guid>
      <description>C# 마이크로소프트에서 제공하는 C# 소개 대화형 자습서를 체험해보았다.
Hello World 문자열 보간: 문자열이 시작되기 전에 $를 쓰고 문자열 속에서 변수를 {} 기호로 감싼다. 파이썬의 format 1string what = &amp;#34;World; 2Console.WriteLine($&amp;#34;Hello {what}&amp;#34;); C#의 숫자 decimal: double 형보다 범위는 좁으나 표현할 수 있는 소수점 아래의 수가 더 많다. 분배 및 루프 C/C&#43;&#43;의 if~else, while과 같았다. 목록 컬렉션 foreach: 파이썬에서 쓰던 for 문법처럼 쓸 수 있다. 편리하다! List 타입 [책] 개발자의 글쓰기 (p.184 ~ p.</description>
      <content:encoded><![CDATA[<h2 id="c">C#</h2>
<p>마이크로소프트에서 제공하는 <a href="https://docs.microsoft.com/ko-kr/dotnet/csharp/tutorials/">C# 소개 대화형 자습서</a>를 체험해보았다.</p>
<ul>
<li>Hello World
<ul>
<li>문자열 보간: 문자열이 시작되기 전에 <code>$</code>를 쓰고 문자열 속에서 변수를 <code>{}</code> 기호로 감싼다. 파이썬의 format</li>
</ul>
</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="ln">1</span><span class="cl"><span class="kt">string</span> <span class="n">what</span> <span class="p">=</span> <span class="s">&#34;World;
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="s"></span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">$&#34;Hello {what}&#34;</span><span class="p">);</span></span></span></code></pre></div><ul>
<li>C#의 숫자
<ul>
<li>decimal: double 형보다 범위는 좁으나 표현할 수 있는 소수점 아래의 수가 더 많다.</li>
</ul>
</li>
<li>분배 및 루프
<ul>
<li>C/C++의 if~else, while과 같았다.</li>
</ul>
</li>
<li>목록 컬렉션
<ul>
<li>foreach: 파이썬에서 쓰던 for 문법처럼 쓸 수 있다. 편리하다!</li>
<li>List 타입</li>
</ul>
</li>
</ul>
<h2 id="책-개발자의-글쓰기-p184--p192">[책] 개발자의 글쓰기 (p.184 ~ p.192)</h2>
<h3 id="논증으로-유용한-정보를-제공하기">논증으로 유용한 정보를 제공하기</h3>
<ul>
<li>설명을 하거나 행동을 유도할 때 근거를 제시하면 더 설득력을 가진다.
<ul>
<li>왜 그렇게 해야 하는지, 어떤 일이 일어날 수 있는지 알려주면 좋다.</li>
</ul>
</li>
<li>개발 문서 문체가 너무 공손하면 독자에게 다른 의미로 해석할 수 있는 여지를 주게 된다.
<ul>
<li>~해야 합니다만 반드시 해야 하는 것은 아닙니다.</li>
<li>~하면 좋습니다. 다만 ~한 경우에는 안 해도 무방합니다.</li>
<li>~하지 말아야 합니다. ~한 경우에는 어쩔 수 없으니 넘어가도 됩니다.</li>
<li>~하지 마십시오. 물론 큰 문제는 없습니다.</li>
<li>~할 것을 추천합니다. 혹시 더 좋은 방법이 있을 수도 있습니다.</li>
</ul>
</li>
<li>이런 표현으로 고쳐야 한다.
<ul>
<li>~하십시오.</li>
<li>~하지 마십시오.</li>
</ul>
</li>
<li>주장에 대한 근거는 최대한 가까운 위치에 서술해야 한다.
<ul>
<li>근거를 짧게 서술할 수 없는 양이라면 근거가 있는 위치를 알려주어야 한다.</li>
</ul>
</li>
<li>문제에 대한 답 역시 최대한 가까운 위치에 서술해야 한다.
<ul>
<li>답을 해결해나가는 과정을 처음부터 순서대로 나열하기보다, 답을 우선 적고 그 답에 접근하는 과정을 설명하는 것이 좋다.</li>
<li>접근법을 이미 알고 있는 사람은 답만 알면 되는데 불필요하게 과정을 모두 따라가야 한다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201215</title>
      <link>https://heojaehun.github.com/blog/til_201215/</link>
      <pubDate>Tue, 15 Dec 2020 23:58:16 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201215/</guid>
      <description>[책] 개발자의 글쓰기 (p.164 ~ p.183) 개념을 범주, 용도, 특징으로 설명하기 범주, 용도, 특징 순으로 작성한다.
범주 사람들에게 무언가를 설명할 때 범주를 먼저 내새우면 이해하기 쉬워진다. 그 사람이 이미 알고있는 것으로부터 이해하기 시작할 수 있다. 용도 용도는 범주의 핵심 기능 독자에게 서비스의 정체성을 명확히 심어줘야 한다. 특징 장점과 강점 장점은 자기 기준, 강점은 경쟁 대상 기준의 비교 결과이다. 그림과 글로 묘사하기 그림을 함께 쓸 때는 글과 그림이 같은 용어를 사용하는지 꼭 확인한다.</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p164--p183">[책] 개발자의 글쓰기 (p.164 ~ p.183)</h2>
<h3 id="개념을-범주-용도-특징으로-설명하기">개념을 범주, 용도, 특징으로 설명하기</h3>
<p>범주, 용도, 특징 순으로 작성한다.</p>
<ul>
<li>범주
<ul>
<li>사람들에게 무언가를 설명할 때 범주를 먼저 내새우면 이해하기 쉬워진다.</li>
<li>그 사람이 이미 알고있는 것으로부터 이해하기 시작할 수 있다.</li>
</ul>
</li>
<li>용도
<ul>
<li>용도는 범주의 핵심 기능</li>
<li>독자에게 서비스의 정체성을 명확히 심어줘야 한다.</li>
</ul>
</li>
<li>특징
<ul>
<li>장점과 강점</li>
<li>장점은 자기 기준, 강점은 경쟁 대상 기준의 비교 결과이다.</li>
</ul>
</li>
</ul>
<h3 id="그림과-글로-묘사하기">그림과 글로 묘사하기</h3>
<ul>
<li>그림을 함께 쓸 때는 글과 그림이 같은 용어를 사용하는지 꼭 확인한다.</li>
<li>묘사에는 주관적 묘사와 객관적 묘사가 있다.
<ul>
<li>요구사항 정의서는 오직 개관적 묘사만 포함해야 한다.</li>
<li>개발자가 주관적 묘사와 객관적 묘사 둘 다 잘하면 기획자나 디자이너와 협의할 때 주도권을 가질 수 있다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201214</title>
      <link>https://heojaehun.github.com/blog/til_201214/</link>
      <pubDate>Tue, 15 Dec 2020 00:26:36 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201214/</guid>
      <description>[책] 개발자의 글쓰기 (p.139 ~ p.162) 릴리스 노트를 쓸 때 문제, 문제점, 해결책, 후속 계획 순으로 쓰는 것이 좋다.
1~한 문제가 있었습니다. 2우리가 파악한 문제점은 ~입니다. 3~하여 문제를 해결했습니다. 4(후속 계획)법적인 문제를 고려해서 쓰기 보고서의 형식을 갖춰야 한다. 개발자의 면책 조항을 적는 것이 좋다. 고객에게 어떤 행동을 유도하는 경우, 그 행동이 필수인지, 권장인지, 선택인지를 알려주어야 한다. 그리고 이는 서술어로 구분하여 표현할 수 있다. 필수 &amp;ldquo;~해야 한다.&amp;rdquo; &amp;ldquo;~하지 않으면 안 된다.&amp;rdquo; &amp;ldquo;~하면 안 된다.</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p139--p162">[책] 개발자의 글쓰기 (p.139 ~ p.162)</h2>
<p>릴리스 노트를 쓸 때 문제, 문제점, 해결책, 후속 계획 순으로 쓰는 것이 좋다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="ln">1</span><span class="cl">~한 문제가 있었습니다.
</span></span><span class="line"><span class="ln">2</span><span class="cl">우리가 파악한 문제점은 ~입니다.
</span></span><span class="line"><span class="ln">3</span><span class="cl">~하여 문제를 해결했습니다.
</span></span><span class="line"><span class="ln">4</span><span class="cl">(후속 계획)</span></span></code></pre></div><h3 id="법적인-문제를-고려해서-쓰기">법적인 문제를 고려해서 쓰기</h3>
<ul>
<li>보고서의 형식을 갖춰야 한다.</li>
<li>개발자의 면책 조항을 적는 것이 좋다.</li>
<li>고객에게 어떤 행동을 유도하는 경우, 그 행동이 필수인지, 권장인지, 선택인지를 알려주어야 한다. 그리고 이는 서술어로 구분하여 표현할 수 있다.</li>
</ul>
<h4 id="필수">필수</h4>
<p>&ldquo;~해야 한다.&rdquo;
&ldquo;~하지 않으면 안 된다.&rdquo;
&ldquo;~하면 안 된다.&rdquo;
&ldquo;~해서는 안 된다.&rdquo;</p>
<h4 id="권장">권장</h4>
<p>&ldquo;~할 것을 권장한다.&rdquo;
&ldquo;~하는 것이 좋다.&rdquo;
&ldquo;~하는 것이 이상적이다.&rdquo;</p>
<h4 id="선택">선택</h4>
<p>&ldquo;~할 수도 있다.&rdquo;
&ldquo;~해도 된다.&rdquo;
&ldquo;~하는 방법이 있다.&rdquo;</p>
<p>개발자에게 면책은 개발의 한계이자 도전 대상이다. 다음 릴리스 노트에는 해결 대상으로 적을 수 있도록 노력해야 한다.</p>
<h3 id="장애-보고서-쓰기">장애 보고서 쓰기</h3>
<h4 id="장애-보고서를-쓸-때-필요한-기술">장애 보고서를 쓸 때 필요한 기술</h4>
<ul>
<li>질문에 대답하는 신속한 글쓰기
<ul>
<li>대화하듯이 작성하고 내용 줄여나가기</li>
<li>장애 내용</li>
<li>장애 영향</li>
<li>장애 원인</li>
<li>조치 상황</li>
<li>조치 결과</li>
<li>핵심 원인</li>
<li>향후 대책</li>
</ul>
</li>
<li>원인과 이유를 찾는 분석적 글쓰기
<ul>
<li>5Whys 기법 사용하기: 다섯 번 반복해서 &ldquo;왜?&ldquo;라고 질문하기</li>
<li>문제가 발생한 진짜 이유를 찾아나가는 것이 중요하다.</li>
<li>이유를 찾을 때는 주어가 항상 사람이 되어야 한다. 대부분 문제는 사람의 실수에 의해서 나타나기 때문이다.</li>
</ul>
</li>
<li>상사를 고려하는 비지니스 관점의 글쓰기
<ul>
<li>비지니스 관점으로 쓴다는 것 &ndash;&gt; 매출과 비용 관점으로 설명하는 것</li>
</ul>
</li>
<li>원하는 것을 얻는 정치적 글쓰기
<ul>
<li>때로는 어떤 일을 과격하게 표현해야 할 때가 있다.</li>
<li>같은 말이라도 조금 과장되게 말을 했을 때 신속하게 처리되기도 한다.</li>
<li>단, 지나치게 과장된 보고는 허위보고이기 때문에 해서는 안된다.</li>
<li>정치적 글쓰기는 정확한 단어와 문장으로 현상과 사실을 있는 그대로 표현해야 한다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201211</title>
      <link>https://heojaehun.github.com/blog/til_201211/</link>
      <pubDate>Fri, 11 Dec 2020 14:05:37 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201211/</guid>
      <description>[책] 개발자의 글쓰기 (p.120 ~ p.138) 체인지 로그를 분류, 요약, 종합하기 체인지 로그를 적절한 양으로 쓰려면
선정하기: 일단은 체인지 로그를 최대한 많이 쓰기 분류하기: 비슷한 것끼리 분류 요약하기: 문장 요약 종합하기: 체인지 로그 선정할 우선 순위
독자가 관심 있고 개발자가 노력을 많이 들인 것 독자가 관심 있고 개발자가 노력을 덜 들인 것 독자가 관심 없고 개발자가 노력을 많이 들인 것 독자가 관심 없고 개발자도 노력을 덜 들인 것 분류 방법</description>
      <content:encoded><![CDATA[<h2 id="책-개발자의-글쓰기-p120--p138">[책] 개발자의 글쓰기 (p.120 ~ p.138)</h2>
<h3 id="체인지-로그를-분류-요약-종합하기">체인지 로그를 분류, 요약, 종합하기</h3>
<ul>
<li>
<p>체인지 로그를 적절한 양으로 쓰려면</p>
<ol>
<li>선정하기: 일단은 체인지 로그를 최대한 많이 쓰기</li>
<li>분류하기: 비슷한 것끼리 분류</li>
<li>요약하기: 문장 요약</li>
<li>종합하기:</li>
</ol>
</li>
<li>
<p>체인지 로그 선정할 우선 순위</p>
<ul>
<li>독자가 관심 있고 개발자가 노력을 많이 들인 것</li>
<li>독자가 관심 있고 개발자가 노력을 덜 들인 것</li>
<li>독자가 관심 없고 개발자가 노력을 많이 들인 것</li>
<li>독자가 관심 없고 개발자도 노력을 덜 들인 것</li>
</ul>
</li>
<li>
<p>분류 방법</p>
<ul>
<li>개발자 중심: 새로운 기능, 개선 사항, 오류 수정 사항을 늘어놓는 방법</li>
<li>독자 중심: 프로그램을 사용하는 과정, 단계별로 변화된 것을 늘어놓는 방법</li>
<li>나는 개발자 중심으로 작성해왔다.</li>
<li>앞으로는 독자 중심으로 작성해야 한다.</li>
</ul>
</li>
<li>
<p>요약하기</p>
<ul>
<li>문장에서 필요한 단어만 남기기</li>
</ul>
</li>
<li>
<p>종합하기</p>
<ul>
<li>릴리스 내용 전체를 종합해서 한 문장으로 만들기</li>
<li>그리고 그 문장을 로그 첫 줄에 적기
<ul>
<li>내가 릴리스 노트 작성할 때 쓰는 &lsquo;개요&rsquo;에 해당된다.</li>
<li>물론, &lsquo;개요&rsquo;임에도 충분히 내용을 종합하지는 못한 것 같다.</li>
</ul>
</li>
<li>특성과 결과를 합쳐서 서술하기</li>
<li>이 때, 회사나 독자가 가장 원하는 것을 중심으로 종합해야 한다.</li>
</ul>
</li>
</ul>
<p>무조건 하나의 관점을 고수할 필요는 없다.
필요하다면 독자, 개발자의 관점을 함께 쓸 수 있다.</p>
<h3 id="semantic-versioning">Semantic Versioning</h3>
<p>X.Y.Z
각 자리별로 숫자가 바뀔 때 아래와 같은 의미를 갖는다.</p>
<ul>
<li>X: 대대적인 업데이트, 이전 버전과 호환되지 않는다. 완전히 새로운 프로그램이다.</li>
<li>Y: 이전 버전과 대부분 호환되지만 일부 호환되지 않는 기능이 추가되었다.</li>
<li>Z: 이전 버전과 호환되고 일부 사소한 수정이 이루어졌다.</li>
</ul>
<p>개발 버전의 시작은 0.1.0부터이다.
사전 배포버전이 필요하다면 Z 뒤에 &lsquo;-&lsquo;를 쓰고 적절한 식별자를 붙인다. (예: 1.0.0-alpha)</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201204</title>
      <link>https://heojaehun.github.com/blog/til_201204/</link>
      <pubDate>Sun, 06 Dec 2020 00:35:50 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201204/</guid>
      <description>ARM 아키텍쳐 기초 익셉션 벡터 테이블 오프셋 이름 0x00 Reset 0x04 Undefined Instruction 0x08 SVC(Supervisor Call) 0x0C Prefetch Abort 0x10 Data Abort 0x14 Not Used 0x18 IRQ interrupt 0x1C FIQ interrupt Reset (offset: 0x00) 칩에 전원이 처음 들어갔을 때 발생하는 익셉션 Undifined Instruction (offset: 0x04) 알 수 없는 명령이 읽혀졌을 때 발생하는 익셉션 SVC, Suvervisor Call (offset: 0x08) 운영체제에서 시스템 콜을 호출했을 때 발생하는 익셉션 Prefetch Abort (offset: 0x0C) 명령을 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션 Data Abort (offset: 0x10) 데이터를 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션 IRQ Interrupt (offset: 0x18) 인터럽트에 의해서 발생하는 익셉션 인터럽트와 익셉션의 동작은 차이나지 않음 통상적으로 인터럽트는 외부 신호에 의해서 발생하고 익셉션은 내부 신호에 의해서 발생하는 것으로 구분한다.</description>
      <content:encoded><![CDATA[<h2 id="arm-아키텍쳐-기초">ARM 아키텍쳐 기초</h2>
<h3 id="익셉션-벡터-테이블">익셉션 벡터 테이블</h3>
<table>
<thead>
<tr>
<th style="text-align:center">오프셋</th>
<th style="text-align:center">이름</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0x00</td>
<td style="text-align:center">Reset</td>
</tr>
<tr>
<td style="text-align:center">0x04</td>
<td style="text-align:center">Undefined Instruction</td>
</tr>
<tr>
<td style="text-align:center">0x08</td>
<td style="text-align:center">SVC(Supervisor Call)</td>
</tr>
<tr>
<td style="text-align:center">0x0C</td>
<td style="text-align:center">Prefetch Abort</td>
</tr>
<tr>
<td style="text-align:center">0x10</td>
<td style="text-align:center">Data Abort</td>
</tr>
<tr>
<td style="text-align:center">0x14</td>
<td style="text-align:center">Not Used</td>
</tr>
<tr>
<td style="text-align:center">0x18</td>
<td style="text-align:center">IRQ interrupt</td>
</tr>
<tr>
<td style="text-align:center">0x1C</td>
<td style="text-align:center">FIQ interrupt</td>
</tr>
</tbody>
</table>
<h4 id="reset-offset-0x00">Reset (offset: 0x00)</h4>
<ul>
<li>칩에 전원이 처음 들어갔을 때 발생하는 익셉션</li>
</ul>
<h4 id="undifined-instruction-offset-0x04">Undifined Instruction (offset: 0x04)</h4>
<ul>
<li>알 수 없는 명령이 읽혀졌을 때 발생하는 익셉션</li>
</ul>
<h4 id="svc-suvervisor-call-offset-0x08">SVC, Suvervisor Call (offset: 0x08)</h4>
<ul>
<li>운영체제에서 시스템 콜을 호출했을 때 발생하는 익셉션</li>
</ul>
<h4 id="prefetch-abort-offset-0x0c">Prefetch Abort (offset: 0x0C)</h4>
<ul>
<li>명령을 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션</li>
</ul>
<h4 id="data-abort-offset-0x10">Data Abort (offset: 0x10)</h4>
<ul>
<li>데이터를 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션</li>
</ul>
<h4 id="irq-interrupt-offset-0x18">IRQ Interrupt (offset: 0x18)</h4>
<ul>
<li>인터럽트에 의해서 발생하는 익셉션</li>
<li>인터럽트와 익셉션의 동작은 차이나지 않음</li>
<li>통상적으로 인터럽트는 외부 신호에 의해서 발생하고 익셉션은 내부 신호에 의해서 발생하는 것으로 구분한다.</li>
</ul>
<h4 id="fiq-interrupt-offset-0x1c">FIQ Interrupt (offset: 0x1C)</h4>
<ul>
<li>인터럽트에 의해서 발생하는 익셉션</li>
<li>IRQ보다 우선순위가 높고 처리도 빠르다.</li>
<li>처리 속도가 빠른 이유는 FIQ 인터럽트가 발생하면 동작 모드가 FIQ 모드로 변하게 되는데, 이 때 CPU 레지스터 R8~R12가 FIQ 전용으로 사용되기 때문이다.
<ul>
<li>조금 더 구체적인 원리를 알 수 있었으면 한다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201203</title>
      <link>https://heojaehun.github.com/blog/til_201203/</link>
      <pubDate>Fri, 04 Dec 2020 18:06:41 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201203/</guid>
      <description>Makefile 참고 링크
참고 링크
KLDP make 강좌
빌드를 자동화해주는 매크로이다. 단순 매크로는 아니고 Incremental build라고 해서 굳이 build 하지 않아도 되는 파일은 건너띄고 작업을 진행할 수 있는 기능이 있다. 이 기능이 일반 쉘스크립트와의 차이점이다.
makefile의 기본 규칙은 아래와 같다.
1&amp;lt;Target&amp;gt; : &amp;lt;Dependencies&amp;gt; 2	&amp;lt;Recipe&amp;gt; Target: 빌드 대상 이름, 최종적으로 생산되는 파일 명 Dependencies: 빌드 대상이 의존하는 파일 목록 Recipe: 빌드 명령 가상 보드의 SYS_ID 값 읽기 realview-pb-a8의 레지스터 주소 0x1000000에 있는 값을 읽어 R1 레지스터에 값을 집어넣기를 성공했다.</description>
      <content:encoded><![CDATA[<h2 id="makefile">Makefile</h2>
<p><a href="https://bowbowbow.tistory.com/12">참고 링크</a></p>
<p><a href="https://www.tuwlab.com/ece/27193">참고 링크</a></p>
<p><a href="http://doc.kldp.org/KoreanDoc/html/gcc_and_make/gcc_and_make-3.html">KLDP make 강좌</a></p>
<p>빌드를 자동화해주는 매크로이다.
단순 매크로는 아니고 Incremental build라고 해서 굳이 build 하지 않아도 되는 파일은 건너띄고 작업을 진행할 수 있는 기능이 있다. 이 기능이 일반 쉘스크립트와의 차이점이다.</p>
<p>makefile의 기본 규칙은 아래와 같다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">&lt;Target&gt; : &lt;Dependencies&gt;
</span></span><span class="line"><span class="ln">2</span><span class="cl">	&lt;Recipe&gt;</span></span></code></pre></div><ul>
<li>Target: 빌드 대상 이름, 최종적으로 생산되는 파일 명</li>
<li>Dependencies: 빌드 대상이 의존하는 파일 목록</li>
<li>Recipe: 빌드 명령</li>
</ul>
<h2 id="가상-보드의-sys_id-값-읽기">가상 보드의 SYS_ID 값 읽기</h2>
<p>realview-pb-a8의 레지스터 주소 0x1000000에 있는 값을 읽어 R1 레지스터에 값을 집어넣기를 성공했다.</p>
<h2 id="gdb-명령-알게된-것">gdb 명령 알게된 것</h2>
<h3 id="list">list</h3>
<p>소스 코드를 출력한다.</p>
<h3 id="info-register-i-r">info register (i r)</h3>
<p>현재 가상 보드의 레지스터 값을 확인하기 위한 명령이다.</p>
<h3 id="step-s">step (s)</h3>
<p>코드를 한줄씩 실행하는 명령이다.</p>
<p><a href="https://lacti.github.io/2008/04/01/gdb-simple-help/">읽어보면 좋을 gdb 설명</a></p>
<h2 id="hugo">Hugo</h2>
<h3 id="이모지-사용">이모지 사용</h3>
<p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">cheat sheet</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201202</title>
      <link>https://heojaehun.github.com/blog/til_201202/</link>
      <pubDate>Thu, 03 Dec 2020 15:10:01 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201202/</guid>
      <description>[TIL] 201202 [Excel] INDIRECT 함수 특정 셀을 수식으로 선택하고 싶을 때 사용하는 함수이다. 사용 방식은 =INDIRECT({셀 주소}, {주소 형식}이다. 여기서 셀 주소는 주소 형식에 따라 두 가지 방밥으로 쓸 수 있다. 예를 들어 A1 셀을 선택할 때는 아래와 같이 쓸 수 있다.
주소 형식 값 셀 주소 값 TRUE A1 FALSE R1C1 실제 예) 아래 수식은 B1 셀을 선택하는 함수이다. =INDIRECT(&amp;quot;R1&amp;quot;&amp;amp;&amp;quot;C&amp;quot;&amp;amp;1&#43;1, FALSE)
[RTOS] 개발 환경 구성 컴파일러와 에뮬레이터 설치 WSL2 상에 설치된 Ubuntu에 아래와 같은 명령으로 컴파일러와 에뮬레이터를 설치하였다.</description>
      <content:encoded><![CDATA[<h1 id="til-201202">[TIL] 201202</h1>
<h2 id="excel-indirect-함수">[Excel] INDIRECT 함수</h2>
<p>특정 셀을 수식으로 선택하고 싶을 때 사용하는 함수이다.
사용 방식은 <code>=INDIRECT({셀 주소}, {주소 형식}</code>이다.
여기서 셀 주소는 주소 형식에 따라 두 가지 방밥으로 쓸 수 있다.
예를 들어 A1 셀을 선택할 때는 아래와 같이 쓸 수 있다.</p>
<table>
<thead>
<tr>
<th style="text-align:center">주소 형식 값</th>
<th style="text-align:center">셀 주소 값</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TRUE</td>
<td style="text-align:center">A1</td>
</tr>
<tr>
<td style="text-align:center">FALSE</td>
<td style="text-align:center">R1C1</td>
</tr>
</tbody>
</table>
<p>실제 예)
아래 수식은 B1 셀을 선택하는 함수이다.
<code>=INDIRECT(&quot;R1&quot;&amp;&quot;C&quot;&amp;1+1, FALSE)</code></p>
<h2 id="rtos-개발-환경-구성">[RTOS] 개발 환경 구성</h2>
<h3 id="컴파일러와-에뮬레이터-설치">컴파일러와 에뮬레이터 설치</h3>
<p>WSL2 상에 설치된 Ubuntu에 아래와 같은 명령으로 컴파일러와 에뮬레이터를 설치하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ sudo apt install gcc-arm-none-eabi
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ sudo apt install qemu-system-arm</span></span></code></pre></div><p>설치 버전을 확인해보았다. 컴파일러는 <code>9.2.1</code>이 설치된 것을 확인하였고, 에뮬레이터는 <code>4.2.1</code>이 설치된 것을 확인하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ arm-none-eabi-gcc -v
</span></span><span class="line"><span class="ln">2</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...
</span></span><span class="line"><span class="ln">3</span><span class="cl">Thread model: single
</span></span><span class="line"><span class="ln">4</span><span class="cl">gcc version 9.2.1 <span class="m">20191025</span> <span class="o">(</span>release<span class="o">)</span> <span class="o">[</span>ARM/arm-9-branch revision 277599<span class="o">]</span> <span class="o">(</span>15:9-2019-q4-0ubuntu1<span class="o">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">$ qemu-system-arm --version
</span></span><span class="line"><span class="ln">7</span><span class="cl">QEMU emulator version 4.2.1 <span class="o">(</span>Debian 1:4.2-3ubuntu6.10<span class="o">)</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">Copyright <span class="o">(</span>c<span class="o">)</span> 2003-2019 Fabrice Bellard and the QEMU Project developers</span></span></code></pre></div><p>qemu-system-arm이 지원하는 가상 머신을 아래 명령으로 확인하였다. 참고하고 있는 책에는 <code>-M</code> 명령 뒤에 <code>?</code>를 입력하라고 되어있지만 먹히지 않았고, 대신 <code>help</code>를 입력하니 됐다. (<a href="https://wiki.qemu.org/Documentation/Platforms/ARM">참고 링크</a>)</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ qemu-system-arm -M help</span></span></code></pre></div><p>출력되는 가상머신 목록 중 앞으로 다룰 가상머신은 <strong>ARM RealView Platform Baseboard for Cortex-A8</strong>이다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...
</span></span><span class="line"><span class="ln">2</span><span class="cl">realview-eb-mpcore   ARM RealView Emulation Baseboard <span class="o">(</span>ARM11MPCore<span class="o">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">realview-pb-a8       ARM RealView Platform Baseboard <span class="k">for</span> Cortex-A8			&lt;&lt; 이것
</span></span><span class="line"><span class="ln">4</span><span class="cl">realview-pbx-a9      ARM RealView Platform Baseboard Explore <span class="k">for</span> Cortex-A9
</span></span><span class="line"><span class="ln">5</span><span class="cl">romulus-bmc          OpenPOWER Romulus BMC <span class="o">(</span>ARM1176<span class="o">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...</span></span></code></pre></div><h3 id="gdb-설치-및-실행">gdb 설치 및 실행</h3>
<p>책 내용과 다르게 설치 패키지 이름이 바뀌었다. 이전에는 gdb를 설치할 때 특정 아키텍쳐를 선택해야했지만 지금은 아니다. <a href="https://kldp.org/node/162560">링크</a></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ sudo apt install gdb-arm-none-eabi
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ sudo apt install gdb-maltiarch</span></span></code></pre></div><p>qemu로 빌드한 파일을 실행해보니 아래와 같은 메시지가 출력되었다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">➜  rtos sudo qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb localhost::1234
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">Unable to init server: Could not connect: Connection refused
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">ALSA lib confmisc.c:767:<span class="o">(</span>parse_card<span class="o">)</span> cannot find card <span class="s1">&#39;0&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_card_driver returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">ALSA lib confmisc.c:392:<span class="o">(</span>snd_func_concat<span class="o">)</span> error evaluating strings
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_concat returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">ALSA lib confmisc.c:1246:<span class="o">(</span>snd_func_refer<span class="o">)</span> error evaluating name
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_refer returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">ALSA lib conf.c:5220:<span class="o">(</span>snd_config_expand<span class="o">)</span> Evaluate error: No such file or directory
</span></span><span class="line"><span class="ln">10</span><span class="cl">ALSA lib pcm.c:2642:<span class="o">(</span>snd_pcm_open_noupdate<span class="o">)</span> Unknown PCM default
</span></span><span class="line"><span class="ln">11</span><span class="cl">alsa: Could not initialize DAC
</span></span><span class="line"><span class="ln">12</span><span class="cl">alsa: Failed to open <span class="sb">`</span>default<span class="s1">&#39;:
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">alsa: Reason: No such file or directory
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">ALSA lib confmisc.c:767:(parse_card) cannot find card &#39;</span>0<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">ALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="s1">ALSA lib conf.c:5220:(snd_config_expand) Evaluate error: No such file or directory
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="s1">ALSA lib pcm.c:2642:(snd_pcm_open_noupdate) Unknown PCM default
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">alsa: Could not initialize DAC
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="s1">alsa: Failed to open `default&#39;</span>:
</span></span><span class="line"><span class="ln">24</span><span class="cl">alsa: Reason: No such file or directory
</span></span><span class="line"><span class="ln">25</span><span class="cl">audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="err">&#39;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">gtk initialization failed</span></span></code></pre></div><p>검색해보니 첫 줄의 내용은 디스플레이와 관련된 것으로 확인 되었다. 그리고 아래 링크 보고 디스플레이 관련 문제는 해결하였다. 링크 1을 통해서 WSL2 상에 설치된 ubuntu와 디스플레이 서버를 연결해야 함을 알았다. 그리고 링크 2를 통해서 실제로 문제를 해결할 수 있었다.
<a href="https://stackoverflow.com/questions/60284542/wsl-gedit-unable-to-init-server-could-not-connect-connection-refused">링크 1</a>
<a href="https://thenoface.tistory.com/5">링크 2</a></p>
<p>남은 것은 오디오 관련 문제이다. ALSA는 리눅스 시스템에서 오디오와 관련된 것으로 안다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">➜  rtos qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb localhost::1234
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">ALSA lib confmisc.c:767:<span class="o">(</span>parse_card<span class="o">)</span> cannot find card <span class="s1">&#39;0&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_card_driver returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">ALSA lib confmisc.c:392:<span class="o">(</span>snd_func_concat<span class="o">)</span> error evaluating strings
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_concat returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">ALSA lib confmisc.c:1246:<span class="o">(</span>snd_func_refer<span class="o">)</span> error evaluating name
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_refer returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">ALSA lib conf.c:5220:<span class="o">(</span>snd_config_expand<span class="o">)</span> Evaluate error: No such file or directory
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">ALSA lib pcm.c:2642:<span class="o">(</span>snd_pcm_open_noupdate<span class="o">)</span> Unknown PCM default
</span></span><span class="line"><span class="ln">10</span><span class="cl">alsa: Could not initialize DAC
</span></span><span class="line"><span class="ln">11</span><span class="cl">alsa: Failed to open <span class="sb">`</span>default<span class="s1">&#39;:
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="s1">alsa: Reason: No such file or directory
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">ALSA lib confmisc.c:767:(parse_card) cannot find card &#39;</span>0<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">ALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="s1">ALSA lib conf.c:5220:(snd_config_expand) Evaluate error: No such file or directory
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="s1">ALSA lib pcm.c:2642:(snd_pcm_open_noupdate) Unknown PCM default
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="s1">alsa: Could not initialize DAC
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">alsa: Failed to open `default&#39;</span>:
</span></span><span class="line"><span class="ln">23</span><span class="cl">alsa: Reason: No such file or directory
</span></span><span class="line"><span class="ln">24</span><span class="cl">audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s1">qemu-system-arm: -gdb localhost::1234: &#39;</span>localhost::1234<span class="err">&#39;</span> is not a valid char driver</span></span></code></pre></div><p>qemu를 사용할 때 오디오는 사용하지 않도록 설정했다. <a href="https://bugs.launchpad.net/qemu/+bug/1816052">참고 링크</a>
아래에 적힌 스크립트를 qemu 실행 전에 입력하거나 터미널이 열릴 때 자동 실행되도록 .bashrc와 같은 파일 마지막에 추가하도록 한다. 나의 경우 zsh를 사용하므로 .zshrc 파일 마지막에 추가하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">export</span> <span class="nv">QEMU_AUDIO_DRV</span><span class="o">=</span>none</span></span></code></pre></div><p><img src="/attatchments/test_img.png" alt="image"></p>
<p>이제 문제없이 qemu가 동작했다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">➜  rtos qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb tcp::1234,ipv4</span></span></code></pre></div><p>별도 커맨드 창을 열고 gdb-multiarch를 실행시킨다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ gdb-multiarch</span></span></code></pre></div><p>gdb 프롬프트가 열리면 타겟을 연결 시킨다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> target remote:1234</span></span></code></pre></div><p>메모리 출력 명령으로 0x00000000 위치의 값을 확인해본다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> x/4x <span class="m">0</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">0x0:    0xe1a00001      0x00000000      0x00000000      0x00000000</span></span></code></pre></div><p>책에 나와있는 것과 표현방식이 조금 다르지만 값은 같았다.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>