<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RTOS on 작업실📦상자</title>
    <link>https://heojaehun.github.com/tags/rtos/</link>
    <description>Recent content in RTOS on 작업실📦상자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Jaehun Heo (CC BY 4.0)</copyright>
    <lastBuildDate>Sun, 06 Dec 2020 00:35:50 +0900</lastBuildDate><atom:link href="https://heojaehun.github.com/tags/rtos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[TIL] 201204</title>
      <link>https://heojaehun.github.com/blog/til_201204/</link>
      <pubDate>Sun, 06 Dec 2020 00:35:50 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201204/</guid>
      <description>ARM 아키텍쳐 기초 익셉션 벡터 테이블 오프셋 이름 0x00 Reset 0x04 Undefined Instruction 0x08 SVC(Supervisor Call) 0x0C Prefetch Abort 0x10 Data Abort 0x14 Not Used 0x18 IRQ interrupt 0x1C FIQ interrupt Reset (offset: 0x00) 칩에 전원이 처음 들어갔을 때 발생하는 익셉션 Undifined Instruction (offset: 0x04) 알 수 없는 명령이 읽혀졌을 때 발생하는 익셉션 SVC, Suvervisor Call (offset: 0x08) 운영체제에서 시스템 콜을 호출했을 때 발생하는 익셉션 Prefetch Abort (offset: 0x0C) 명령을 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션 Data Abort (offset: 0x10) 데이터를 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션 IRQ Interrupt (offset: 0x18) 인터럽트에 의해서 발생하는 익셉션 인터럽트와 익셉션의 동작은 차이나지 않음 통상적으로 인터럽트는 외부 신호에 의해서 발생하고 익셉션은 내부 신호에 의해서 발생하는 것으로 구분한다.</description>
      <content:encoded><![CDATA[<h2 id="arm-아키텍쳐-기초">ARM 아키텍쳐 기초</h2>
<h3 id="익셉션-벡터-테이블">익셉션 벡터 테이블</h3>
<table>
<thead>
<tr>
<th style="text-align:center">오프셋</th>
<th style="text-align:center">이름</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0x00</td>
<td style="text-align:center">Reset</td>
</tr>
<tr>
<td style="text-align:center">0x04</td>
<td style="text-align:center">Undefined Instruction</td>
</tr>
<tr>
<td style="text-align:center">0x08</td>
<td style="text-align:center">SVC(Supervisor Call)</td>
</tr>
<tr>
<td style="text-align:center">0x0C</td>
<td style="text-align:center">Prefetch Abort</td>
</tr>
<tr>
<td style="text-align:center">0x10</td>
<td style="text-align:center">Data Abort</td>
</tr>
<tr>
<td style="text-align:center">0x14</td>
<td style="text-align:center">Not Used</td>
</tr>
<tr>
<td style="text-align:center">0x18</td>
<td style="text-align:center">IRQ interrupt</td>
</tr>
<tr>
<td style="text-align:center">0x1C</td>
<td style="text-align:center">FIQ interrupt</td>
</tr>
</tbody>
</table>
<h4 id="reset-offset-0x00">Reset (offset: 0x00)</h4>
<ul>
<li>칩에 전원이 처음 들어갔을 때 발생하는 익셉션</li>
</ul>
<h4 id="undifined-instruction-offset-0x04">Undifined Instruction (offset: 0x04)</h4>
<ul>
<li>알 수 없는 명령이 읽혀졌을 때 발생하는 익셉션</li>
</ul>
<h4 id="svc-suvervisor-call-offset-0x08">SVC, Suvervisor Call (offset: 0x08)</h4>
<ul>
<li>운영체제에서 시스템 콜을 호출했을 때 발생하는 익셉션</li>
</ul>
<h4 id="prefetch-abort-offset-0x0c">Prefetch Abort (offset: 0x0C)</h4>
<ul>
<li>명령을 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션</li>
</ul>
<h4 id="data-abort-offset-0x10">Data Abort (offset: 0x10)</h4>
<ul>
<li>데이터를 읽는 과정에서 오류가 생겼을 때 발생하는 익셉션</li>
</ul>
<h4 id="irq-interrupt-offset-0x18">IRQ Interrupt (offset: 0x18)</h4>
<ul>
<li>인터럽트에 의해서 발생하는 익셉션</li>
<li>인터럽트와 익셉션의 동작은 차이나지 않음</li>
<li>통상적으로 인터럽트는 외부 신호에 의해서 발생하고 익셉션은 내부 신호에 의해서 발생하는 것으로 구분한다.</li>
</ul>
<h4 id="fiq-interrupt-offset-0x1c">FIQ Interrupt (offset: 0x1C)</h4>
<ul>
<li>인터럽트에 의해서 발생하는 익셉션</li>
<li>IRQ보다 우선순위가 높고 처리도 빠르다.</li>
<li>처리 속도가 빠른 이유는 FIQ 인터럽트가 발생하면 동작 모드가 FIQ 모드로 변하게 되는데, 이 때 CPU 레지스터 R8~R12가 FIQ 전용으로 사용되기 때문이다.
<ul>
<li>조금 더 구체적인 원리를 알 수 있었으면 한다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201203</title>
      <link>https://heojaehun.github.com/blog/til_201203/</link>
      <pubDate>Fri, 04 Dec 2020 18:06:41 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201203/</guid>
      <description>Makefile 참고 링크
참고 링크
KLDP make 강좌
빌드를 자동화해주는 매크로이다. 단순 매크로는 아니고 Incremental build라고 해서 굳이 build 하지 않아도 되는 파일은 건너띄고 작업을 진행할 수 있는 기능이 있다. 이 기능이 일반 쉘스크립트와의 차이점이다.
makefile의 기본 규칙은 아래와 같다.
1&amp;lt;Target&amp;gt; : &amp;lt;Dependencies&amp;gt; 2	&amp;lt;Recipe&amp;gt; Target: 빌드 대상 이름, 최종적으로 생산되는 파일 명 Dependencies: 빌드 대상이 의존하는 파일 목록 Recipe: 빌드 명령 가상 보드의 SYS_ID 값 읽기 realview-pb-a8의 레지스터 주소 0x1000000에 있는 값을 읽어 R1 레지스터에 값을 집어넣기를 성공했다.</description>
      <content:encoded><![CDATA[<h2 id="makefile">Makefile</h2>
<p><a href="https://bowbowbow.tistory.com/12">참고 링크</a></p>
<p><a href="https://www.tuwlab.com/ece/27193">참고 링크</a></p>
<p><a href="http://doc.kldp.org/KoreanDoc/html/gcc_and_make/gcc_and_make-3.html">KLDP make 강좌</a></p>
<p>빌드를 자동화해주는 매크로이다.
단순 매크로는 아니고 Incremental build라고 해서 굳이 build 하지 않아도 되는 파일은 건너띄고 작업을 진행할 수 있는 기능이 있다. 이 기능이 일반 쉘스크립트와의 차이점이다.</p>
<p>makefile의 기본 규칙은 아래와 같다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">&lt;Target&gt; : &lt;Dependencies&gt;
</span></span><span class="line"><span class="ln">2</span><span class="cl">	&lt;Recipe&gt;</span></span></code></pre></div><ul>
<li>Target: 빌드 대상 이름, 최종적으로 생산되는 파일 명</li>
<li>Dependencies: 빌드 대상이 의존하는 파일 목록</li>
<li>Recipe: 빌드 명령</li>
</ul>
<h2 id="가상-보드의-sys_id-값-읽기">가상 보드의 SYS_ID 값 읽기</h2>
<p>realview-pb-a8의 레지스터 주소 0x1000000에 있는 값을 읽어 R1 레지스터에 값을 집어넣기를 성공했다.</p>
<h2 id="gdb-명령-알게된-것">gdb 명령 알게된 것</h2>
<h3 id="list">list</h3>
<p>소스 코드를 출력한다.</p>
<h3 id="info-register-i-r">info register (i r)</h3>
<p>현재 가상 보드의 레지스터 값을 확인하기 위한 명령이다.</p>
<h3 id="step-s">step (s)</h3>
<p>코드를 한줄씩 실행하는 명령이다.</p>
<p><a href="https://lacti.github.io/2008/04/01/gdb-simple-help/">읽어보면 좋을 gdb 설명</a></p>
<h2 id="hugo">Hugo</h2>
<h3 id="이모지-사용">이모지 사용</h3>
<p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/">cheat sheet</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[TIL] 201202</title>
      <link>https://heojaehun.github.com/blog/til_201202/</link>
      <pubDate>Thu, 03 Dec 2020 15:10:01 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201202/</guid>
      <description>[TIL] 201202 [Excel] INDIRECT 함수 특정 셀을 수식으로 선택하고 싶을 때 사용하는 함수이다. 사용 방식은 =INDIRECT({셀 주소}, {주소 형식}이다. 여기서 셀 주소는 주소 형식에 따라 두 가지 방밥으로 쓸 수 있다. 예를 들어 A1 셀을 선택할 때는 아래와 같이 쓸 수 있다.
주소 형식 값 셀 주소 값 TRUE A1 FALSE R1C1 실제 예) 아래 수식은 B1 셀을 선택하는 함수이다. =INDIRECT(&amp;quot;R1&amp;quot;&amp;amp;&amp;quot;C&amp;quot;&amp;amp;1&#43;1, FALSE)
[RTOS] 개발 환경 구성 컴파일러와 에뮬레이터 설치 WSL2 상에 설치된 Ubuntu에 아래와 같은 명령으로 컴파일러와 에뮬레이터를 설치하였다.</description>
      <content:encoded><![CDATA[<h1 id="til-201202">[TIL] 201202</h1>
<h2 id="excel-indirect-함수">[Excel] INDIRECT 함수</h2>
<p>특정 셀을 수식으로 선택하고 싶을 때 사용하는 함수이다.
사용 방식은 <code>=INDIRECT({셀 주소}, {주소 형식}</code>이다.
여기서 셀 주소는 주소 형식에 따라 두 가지 방밥으로 쓸 수 있다.
예를 들어 A1 셀을 선택할 때는 아래와 같이 쓸 수 있다.</p>
<table>
<thead>
<tr>
<th style="text-align:center">주소 형식 값</th>
<th style="text-align:center">셀 주소 값</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">TRUE</td>
<td style="text-align:center">A1</td>
</tr>
<tr>
<td style="text-align:center">FALSE</td>
<td style="text-align:center">R1C1</td>
</tr>
</tbody>
</table>
<p>실제 예)
아래 수식은 B1 셀을 선택하는 함수이다.
<code>=INDIRECT(&quot;R1&quot;&amp;&quot;C&quot;&amp;1+1, FALSE)</code></p>
<h2 id="rtos-개발-환경-구성">[RTOS] 개발 환경 구성</h2>
<h3 id="컴파일러와-에뮬레이터-설치">컴파일러와 에뮬레이터 설치</h3>
<p>WSL2 상에 설치된 Ubuntu에 아래와 같은 명령으로 컴파일러와 에뮬레이터를 설치하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ sudo apt install gcc-arm-none-eabi
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ sudo apt install qemu-system-arm</span></span></code></pre></div><p>설치 버전을 확인해보았다. 컴파일러는 <code>9.2.1</code>이 설치된 것을 확인하였고, 에뮬레이터는 <code>4.2.1</code>이 설치된 것을 확인하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ arm-none-eabi-gcc -v
</span></span><span class="line"><span class="ln">2</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...
</span></span><span class="line"><span class="ln">3</span><span class="cl">Thread model: single
</span></span><span class="line"><span class="ln">4</span><span class="cl">gcc version 9.2.1 <span class="m">20191025</span> <span class="o">(</span>release<span class="o">)</span> <span class="o">[</span>ARM/arm-9-branch revision 277599<span class="o">]</span> <span class="o">(</span>15:9-2019-q4-0ubuntu1<span class="o">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">
</span></span><span class="line"><span class="ln">6</span><span class="cl">$ qemu-system-arm --version
</span></span><span class="line"><span class="ln">7</span><span class="cl">QEMU emulator version 4.2.1 <span class="o">(</span>Debian 1:4.2-3ubuntu6.10<span class="o">)</span>
</span></span><span class="line"><span class="ln">8</span><span class="cl">Copyright <span class="o">(</span>c<span class="o">)</span> 2003-2019 Fabrice Bellard and the QEMU Project developers</span></span></code></pre></div><p>qemu-system-arm이 지원하는 가상 머신을 아래 명령으로 확인하였다. 참고하고 있는 책에는 <code>-M</code> 명령 뒤에 <code>?</code>를 입력하라고 되어있지만 먹히지 않았고, 대신 <code>help</code>를 입력하니 됐다. (<a href="https://wiki.qemu.org/Documentation/Platforms/ARM">참고 링크</a>)</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ qemu-system-arm -M help</span></span></code></pre></div><p>출력되는 가상머신 목록 중 앞으로 다룰 가상머신은 <strong>ARM RealView Platform Baseboard for Cortex-A8</strong>이다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...
</span></span><span class="line"><span class="ln">2</span><span class="cl">realview-eb-mpcore   ARM RealView Emulation Baseboard <span class="o">(</span>ARM11MPCore<span class="o">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">realview-pb-a8       ARM RealView Platform Baseboard <span class="k">for</span> Cortex-A8			&lt;&lt; 이것
</span></span><span class="line"><span class="ln">4</span><span class="cl">realview-pbx-a9      ARM RealView Platform Baseboard Explore <span class="k">for</span> Cortex-A9
</span></span><span class="line"><span class="ln">5</span><span class="cl">romulus-bmc          OpenPOWER Romulus BMC <span class="o">(</span>ARM1176<span class="o">)</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">...<span class="o">(</span>생략<span class="o">)</span>...</span></span></code></pre></div><h3 id="gdb-설치-및-실행">gdb 설치 및 실행</h3>
<p>책 내용과 다르게 설치 패키지 이름이 바뀌었다. 이전에는 gdb를 설치할 때 특정 아키텍쳐를 선택해야했지만 지금은 아니다. <a href="https://kldp.org/node/162560">링크</a></p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ sudo apt install gdb-arm-none-eabi
</span></span><span class="line"><span class="ln">2</span><span class="cl">$ sudo apt install gdb-maltiarch</span></span></code></pre></div><p>qemu로 빌드한 파일을 실행해보니 아래와 같은 메시지가 출력되었다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">➜  rtos sudo qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb localhost::1234
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">Unable to init server: Could not connect: Connection refused
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">ALSA lib confmisc.c:767:<span class="o">(</span>parse_card<span class="o">)</span> cannot find card <span class="s1">&#39;0&#39;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_card_driver returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">ALSA lib confmisc.c:392:<span class="o">(</span>snd_func_concat<span class="o">)</span> error evaluating strings
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_concat returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">ALSA lib confmisc.c:1246:<span class="o">(</span>snd_func_refer<span class="o">)</span> error evaluating name
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_refer returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">ALSA lib conf.c:5220:<span class="o">(</span>snd_config_expand<span class="o">)</span> Evaluate error: No such file or directory
</span></span><span class="line"><span class="ln">10</span><span class="cl">ALSA lib pcm.c:2642:<span class="o">(</span>snd_pcm_open_noupdate<span class="o">)</span> Unknown PCM default
</span></span><span class="line"><span class="ln">11</span><span class="cl">alsa: Could not initialize DAC
</span></span><span class="line"><span class="ln">12</span><span class="cl">alsa: Failed to open <span class="sb">`</span>default<span class="s1">&#39;:
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">alsa: Reason: No such file or directory
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">ALSA lib confmisc.c:767:(parse_card) cannot find card &#39;</span>0<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">ALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="s1">ALSA lib conf.c:5220:(snd_config_expand) Evaluate error: No such file or directory
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="s1">ALSA lib pcm.c:2642:(snd_pcm_open_noupdate) Unknown PCM default
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">alsa: Could not initialize DAC
</span></span></span><span class="line"><span class="ln">23</span><span class="cl"><span class="s1">alsa: Failed to open `default&#39;</span>:
</span></span><span class="line"><span class="ln">24</span><span class="cl">alsa: Reason: No such file or directory
</span></span><span class="line"><span class="ln">25</span><span class="cl">audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="err">&#39;</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">gtk initialization failed</span></span></code></pre></div><p>검색해보니 첫 줄의 내용은 디스플레이와 관련된 것으로 확인 되었다. 그리고 아래 링크 보고 디스플레이 관련 문제는 해결하였다. 링크 1을 통해서 WSL2 상에 설치된 ubuntu와 디스플레이 서버를 연결해야 함을 알았다. 그리고 링크 2를 통해서 실제로 문제를 해결할 수 있었다.
<a href="https://stackoverflow.com/questions/60284542/wsl-gedit-unable-to-init-server-could-not-connect-connection-refused">링크 1</a>
<a href="https://thenoface.tistory.com/5">링크 2</a></p>
<p>남은 것은 오디오 관련 문제이다. ALSA는 리눅스 시스템에서 오디오와 관련된 것으로 안다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln"> 1</span><span class="cl">➜  rtos qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb localhost::1234
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">ALSA lib confmisc.c:767:<span class="o">(</span>parse_card<span class="o">)</span> cannot find card <span class="s1">&#39;0&#39;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_card_driver returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">ALSA lib confmisc.c:392:<span class="o">(</span>snd_func_concat<span class="o">)</span> error evaluating strings
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_concat returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">ALSA lib confmisc.c:1246:<span class="o">(</span>snd_func_refer<span class="o">)</span> error evaluating name
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">ALSA lib conf.c:4732:<span class="o">(</span>_snd_config_evaluate<span class="o">)</span> <span class="k">function</span> snd_func_refer returned error: No such file or directory
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">ALSA lib conf.c:5220:<span class="o">(</span>snd_config_expand<span class="o">)</span> Evaluate error: No such file or directory
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">ALSA lib pcm.c:2642:<span class="o">(</span>snd_pcm_open_noupdate<span class="o">)</span> Unknown PCM default
</span></span><span class="line"><span class="ln">10</span><span class="cl">alsa: Could not initialize DAC
</span></span><span class="line"><span class="ln">11</span><span class="cl">alsa: Failed to open <span class="sb">`</span>default<span class="s1">&#39;:
</span></span></span><span class="line"><span class="ln">12</span><span class="cl"><span class="s1">alsa: Reason: No such file or directory
</span></span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="s1">ALSA lib confmisc.c:767:(parse_card) cannot find card &#39;</span>0<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">15</span><span class="cl"><span class="s1">ALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings
</span></span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">17</span><span class="cl"><span class="s1">ALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name
</span></span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="s1">ALSA lib conf.c:4732:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
</span></span></span><span class="line"><span class="ln">19</span><span class="cl"><span class="s1">ALSA lib conf.c:5220:(snd_config_expand) Evaluate error: No such file or directory
</span></span></span><span class="line"><span class="ln">20</span><span class="cl"><span class="s1">ALSA lib pcm.c:2642:(snd_pcm_open_noupdate) Unknown PCM default
</span></span></span><span class="line"><span class="ln">21</span><span class="cl"><span class="s1">alsa: Could not initialize DAC
</span></span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="s1">alsa: Failed to open `default&#39;</span>:
</span></span><span class="line"><span class="ln">23</span><span class="cl">alsa: Reason: No such file or directory
</span></span><span class="line"><span class="ln">24</span><span class="cl">audio: Failed to create voice <span class="sb">`</span>lm4549.out<span class="s1">&#39;
</span></span></span><span class="line"><span class="ln">25</span><span class="cl"><span class="s1">qemu-system-arm: -gdb localhost::1234: &#39;</span>localhost::1234<span class="err">&#39;</span> is not a valid char driver</span></span></code></pre></div><p>qemu를 사용할 때 오디오는 사용하지 않도록 설정했다. <a href="https://bugs.launchpad.net/qemu/+bug/1816052">참고 링크</a>
아래에 적힌 스크립트를 qemu 실행 전에 입력하거나 터미널이 열릴 때 자동 실행되도록 .bashrc와 같은 파일 마지막에 추가하도록 한다. 나의 경우 zsh를 사용하므로 .zshrc 파일 마지막에 추가하였다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="nb">export</span> <span class="nv">QEMU_AUDIO_DRV</span><span class="o">=</span>none</span></span></code></pre></div><p><img src="/attatchments/test_img.png" alt="image"></p>
<p>이제 문제없이 qemu가 동작했다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">➜  rtos qemu-system-arm -M realview-pb-a8 -kernel moduOS.axf -S -gdb tcp::1234,ipv4</span></span></code></pre></div><p>별도 커맨드 창을 열고 gdb-multiarch를 실행시킨다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl">$ gdb-multiarch</span></span></code></pre></div><p>gdb 프롬프트가 열리면 타겟을 연결 시킨다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> target remote:1234</span></span></code></pre></div><p>메모리 출력 명령으로 0x00000000 위치의 값을 확인해본다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="ln">1</span><span class="cl"><span class="o">(</span>gdb<span class="o">)</span> x/4x <span class="m">0</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">0x0:    0xe1a00001      0x00000000      0x00000000      0x00000000</span></span></code></pre></div><p>책에 나와있는 것과 표현방식이 조금 다르지만 값은 같았다.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>