<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>gloang on 작업실📦상자</title>
    <link>https://heojaehun.github.com/tags/gloang/</link>
    <description>Recent content in gloang on 작업실📦상자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Jaehun Heo (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 01 Feb 2024 09:50:57 +0900</lastBuildDate><atom:link href="https://heojaehun.github.com/tags/gloang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang Main함수 테스트하기</title>
      <link>https://heojaehun.github.com/blog/golang-main-test/</link>
      <pubDate>Thu, 01 Feb 2024 09:50:57 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/golang-main-test/</guid>
      <description>일러두기 이 글은 &amp;lt;실무에 바로 쓰는 Go 언어 핸즈온 가이드&amp;gt;의 연습 문제 1.1을 다룹니다. 연습 문제를 풀어보면서 제가 어떻게 답을 작성했는지 설명하는 글입니다. 그리고 출제자의 답안과 비교하는 글입니다. 따라서 제가 작성한 코드는 썩 훌륭하지 않을 수 있습니다. 출제자의 의도를 충분히 만족하지 못한 부분도 있을 수 있습니다.
시간이 없다면 이 글의 앞부분을 건너뛰고 답안 코드를 바로 읽는 게 좋겠습니다. 마침 심심한데 다른 사람이 어떻게 문제를 풀었나 궁금하시다면, 바로 아래부터 읽어나가시면 됩니다.</description>
      <content:encoded><![CDATA[<h2 id="일러두기">일러두기</h2>
<p>이 글은 &lt;실무에 바로 쓰는 Go 언어 핸즈온 가이드&gt;의 연습 문제 1.1을 다룹니다.
연습 문제를 풀어보면서 제가 어떻게 답을 작성했는지 설명하는 글입니다.
그리고 출제자의 답안과 비교하는 글입니다.
따라서 제가 작성한 코드는 썩 훌륭하지 않을 수 있습니다.
출제자의 의도를 충분히 만족하지 못한 부분도 있을 수 있습니다.</p>
<p>시간이 없다면 이 글의 앞부분을 건너뛰고 답안 코드를 바로 읽는 게 좋겠습니다.
마침 심심한데 다른 사람이 어떻게 문제를 풀었나 궁금하시다면, 바로 아래부터 읽어나가시면 됩니다.</p>
<h2 id="연습-문제">연습 문제</h2>
<p>연습 문제는 책에서 다룬 예제 코드의 main 함수 테스트를 작성하는 것입니다.
예제 코드의 내용은 이렇습니다.</p>
<ol>
<li>애플리케이션을 실행할 때 숫자를 인자로 받습니다.</li>
<li>숫자가 아닌 인자를 받으면 애플리케이션 사용법을 출력하고 끝냅니다.</li>
<li>인자를 숫자로 받았다면 이름을 입력하라는 문자열이 출력됩니다.</li>
<li>사용자가 이름을 입력하고 나면, 인자로 넘긴 수만큼 이름이 반복 출력됩니다.</li>
</ol>
<p>책은 이 프로그램에서 만든 모든 함수의 테스트 코드를 작성하고 설명합니다.
단 한 가지, main 함수 테스트 코드만 빼고요.</p>
<h2 id="연습-문제-요구사항">연습 문제 요구사항</h2>
<p>연습 문제에는 아래와 같은 요구사항이 있습니다.</p>
<ul>
<li>애플리케이션을 빌드 해야한다.</li>
<li>다양한 이자를 주어 실행하고 표준 출력과 종료 코드를 확인해 테스트해야 한다.</li>
</ul>
<h2 id="나의-코드">나의 코드</h2>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">  1</span><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="s">&#34;bytes&#34;</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="s">&#34;errors&#34;</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">
</span></span><span class="line"><span class="ln"> 14</span><span class="cl"><span class="kd">var</span> <span class="nx">usage</span> <span class="p">=</span> <span class="s">`Usage: ./application &lt;integer&gt; [-h|--help]
</span></span></span><span class="line"><span class="ln"> 15</span><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="ln"> 16</span><span class="cl"><span class="s">A greeter application wich prints the name you entered &lt;integer&gt; number of times.
</span></span></span><span class="line"><span class="ln"> 17</span><span class="cl"><span class="s">`</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl"><span class="kd">func</span> <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">        <span class="nx">appName</span> <span class="o">+=</span> <span class="s">&#34;.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">    <span class="nx">build</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">build</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Error building %s: %s&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">
</span></span><span class="line"><span class="ln"> 31</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Building...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">    <span class="nx">appName</span> <span class="o">:=</span> <span class="s">&#34;application&#34;</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">    <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Testing...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl">        <span class="nx">num</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">        <span class="nx">name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 42</span><span class="cl">        <span class="nx">output</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">        <span class="nx">err</span>    <span class="kt">error</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Invalid number of arguments\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;strconv.Atoi: parsing \&#34;a\&#34;: invalid syntax\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Must specify a number greater than 0\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">            <span class="nx">num</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln"> 62</span><span class="cl"><span class="s">You didn&#39;t enter your name
</span></span></span><span class="line"><span class="ln"> 63</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">            <span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>  <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">            <span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Jaehun Heo\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln"> 70</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 71</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 72</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 73</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 74</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln"> 75</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">        <span class="kd">var</span> <span class="nx">cmd</span> <span class="o">*</span><span class="nx">exec</span><span class="p">.</span><span class="nx">Cmd</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span> <span class="o">+</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span><span class="o">+</span><span class="nx">appName</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">        <span class="kd">var</span> <span class="nx">output</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">output</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted error: %v, Got: %v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span> <span class="o">!=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted stdout message to be: \n%v, \nGot: \n%v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span><span class="p">,</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">
</span></span><span class="line"><span class="ln">105</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Getting done...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">106</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">
</span></span><span class="line"><span class="ln">108</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Start unit tests...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">110</span><span class="cl">
</span></span><span class="line"><span class="ln">111</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="testmain으로-테스트-환경을-갖추기">TestMain()으로 테스트 환경을 갖추기</h2>
<p><code>TestMain()</code>을 이용해 테스트 전에 필요한 작업을 할 수 있습니다.
일반 테스트 함수와 다르게 매개변수 타입이 <code>*testing.M</code>인 점을 주의해야 합니다.
<code>TestMain()</code>의 구조는 대략 이렇습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="c1">// 이곳에서 단위 테스트 실행 전에 처리할 일을 구현
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="c1">// 단위 테스트 실행
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="c1"></span>    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="c1">// 필요하다면 후처리 과정을 이곳에 구현
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="c1"></span>    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="바이너리-파일-빌드">바이너리 파일 빌드</h2>
<p>책에서 지시한 첫 번째 요구사항은 바이너리 파일 빌드입니다.
그래서 <code>m.Run()</code>을 실행하기 전에 빌드하는 과정을 추가합니다.
빌드할 파일 이름을 입력받는 <code>buildApp()</code>이라는 함수를 만들었습니다.
여기서 코드를 실행하는 OS를 구분해 환경에 맞게 바이너리 파일을 빌드합니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">buildApp</span><span class="p">(</span><span class="nx">appName</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="nx">appName</span> <span class="o">+=</span> <span class="s">&#34;.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="nx">build</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">build</span><span class="p">.</span><span class="nf">Run</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">os</span><span class="p">.</span><span class="nx">Stderr</span><span class="p">,</span> <span class="s">&#34;Error building %s: %s&#34;</span><span class="p">,</span> <span class="nx">appName</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h3 id="os-구분하기">OS 구분하기</h3>
<p>Linux나 macOS에서는 확장자가 없어도 바이너리 파일이 잘 실행됩니다.
하지만 Windows에서는 <code>.exe</code> 확장자가 붙어야 바이너리 파일을 실행할 수 있습니다.
<code>runtime</code> 패키지의 <code>GOOS</code> 변숫값으로 코드를 실행하고 있는 OS를 알 수 있습니다.</p>
<h3 id="빌드-명령-실행하기">빌드 명령 실행하기</h3>
<p><code>exec</code> 패키지를 이용하면 코드 안에서 외부 명령을 실행할 수 있습니다.
사용 방법은 간단합니다.
<code>exec</code>의 <code>Command()</code>함수에 실행할 명령과 인자를 넘깁니다.
그러면 <code>*Cmd</code>타입의 구조체가 만들어집니다.
이 <code>*Cmd</code>구조체에 포함된 <code>Run()</code>함수를 호출하면 명령이 실행됩니다.</p>
<p>참고로 <code>*Cmd</code>타입 구조체는 1회용입니다.
<code>Run()</code>이나 <code>Output()</code>으로 명령을 실행하고 나면 이 구조체를 <a href="https://pkg.go.dev/os/exec#Cmd">재사용할 수 없습니다.</a></p>
<h2 id="테스트-케이스">테스트 케이스</h2>
<p>앱을 실행할 때 입력할 인자, 이름, 예상되는 출력값, 에러 묶음을 정의합니다.
버그가 새어 나가지 않도록 빈틈없이 케이스를 만듭니다.
저는 5가지 경우가 있을 수 있다고 생각하여 아래처럼 작성하였습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">        <span class="nx">num</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="nx">name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="nx">output</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="nx">err</span>    <span class="kt">error</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Invalid number of arguments\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;a&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;strconv.Atoi: parsing \&#34;a\&#34;: invalid syntax\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>    <span class="s">&#34;-1&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">&#34;Must specify a number greater than 0\n&#34;</span> <span class="o">+</span> <span class="nx">usage</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="nx">err</span><span class="p">:</span>    <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">            <span class="nx">num</span><span class="p">:</span> <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln">28</span><span class="cl"><span class="s">You didn&#39;t enter your name
</span></span></span><span class="line"><span class="ln">29</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">            <span class="nx">err</span><span class="p">:</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;exit status 1&#34;</span><span class="p">),</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">            <span class="nx">num</span><span class="p">:</span>  <span class="s">&#34;5&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">            <span class="nx">name</span><span class="p">:</span> <span class="s">&#34;Jaehun Heo\n&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">            <span class="nx">output</span><span class="p">:</span> <span class="s">`Your name please? Press the Enter key when done.
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">37</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">38</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">40</span><span class="cl"><span class="s">Nice to meet you Jaehun Heo
</span></span></span><span class="line"><span class="ln">41</span><span class="cl"><span class="s">`</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">    
</span></span><span class="line"><span class="ln">45</span><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="ln">46</span><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></div><h2 id="테스트-실행">테스트 실행</h2>
<p>바이너리 파일을 빌드할 때와 같이 <code>exec.Comman()</code>로 앱을 실행할 준비를 합니다.
인자가 있는 경우와 없는 경우가 있어 구분 지었습니다.</p>
<p>준비한 테스트 케이스대로 입력하면 기대한 출력값이 나오는지 확인해야 합니다.
그러려면 실행할 명령의 표준 입력과 표준 출력을 가로채야 합니다.
저는 이 과정에서 해결할 방법을 몰라 한참을 헤맸었습니다.</p>
<p>간단하게도 <code>*Cmd</code> 구조체에 준비된 인터페이스를 이용하면 됩니다.
<code>Stdin</code> 인터페이스에 준비한 입력을 넣습니다.
그리고 <code>Stdout</code> 인터페이스에 버퍼를 연결합니다.</p>
<p>이제 실행해야죠.
<code>cmd.Run()</code>으로 명령을 실행한 뒤 출력 버퍼와 에러가 예상과 같은지 확인합니다.
만약 테스트에 실패한다면 에러 문구를 출력하고 <code>os.Exit(1)</code>로 테스트를 끝냅니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln"> 1</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">        <span class="kd">var</span> <span class="nx">cmd</span> <span class="o">*</span><span class="nx">exec</span><span class="p">.</span><span class="nx">Cmd</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span> <span class="o">==</span> <span class="s">&#34;&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span> <span class="o">+</span> <span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">            <span class="nx">cmd</span> <span class="p">=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;./&#34;</span><span class="o">+</span><span class="nx">appName</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="kd">var</span> <span class="nx">output</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">output</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted error: %v, Got: %v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">(),</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="k">if</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span> <span class="o">!=</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Expacted stdout message to be: \n%v, \nGot: \n%v\n&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">output</span><span class="p">,</span> <span class="nx">output</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span></span></span></code></pre></div><h2 id="테스트-뒷-마무리">테스트 뒷 마무리</h2>
<p>여기서는 테스트한 바이너리 파일을 지우는 일을 합니다.
굳이 지우지 않아도 됩니다.
하지만 저는 테스트는 테스트일 뿐이라는 생각으로 지우기로 했습니다.</p>
<p>한편으로는 바이너리 파일을 그대로 두는 것이 더 낫지 않을까도 생각합니다.
테스트를 거친 결과물임을 보장하는 것이니까요.
테스트에 실패했을 경우에만 지우는 것도 방법이겠네요.</p>
<p>그다음은 단위 테스트를 할 차례입니다.
<code>m.Run()</code>으로 실행할 수 있습니다.
<code>m</code>이라는 변수가 갑자기 어디서 튀어나왔나 싶지요.
이 글 초반에 설명한 <code>TestMain()</code>함수의 매개변수입니다.</p>
<p><code>m.Run()</code>은 모든 단위 테스트를 통과하면 0을, 실패하면 1을 반환합니다.
실행 결괏값을 <code>os.Exit()</code>에 넘겨주고 모든 테스트를 끝마칩니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">1</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Getting done...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">2</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">appName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">3</span><span class="cl">
</span></span><span class="line"><span class="ln">4</span><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt; Start unit tests...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">5</span><span class="cl">    <span class="nx">result</span> <span class="o">:=</span> <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">6</span><span class="cl">
</span></span><span class="line"><span class="ln">7</span><span class="cl">    <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span></span></span></code></pre></div><h2 id="실행-결과">실행 결과</h2>
<p>작성한 테스트 코드를 <code>go test -v</code>명령으로 실행해 봅니다.
결과는 아래와 같습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln"> 1</span><span class="cl">$ go <span class="nb">test</span> -v
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">-&gt; Building...
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">-&gt; Testing...
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">-&gt; Getting <span class="k">done</span>...
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">-&gt; Start unit tests...
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="o">===</span> RUN   TestParseArgs
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">--- PASS: TestParseArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="o">===</span> RUN   TestRunCmd
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">--- PASS: TestRunCmd <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="o">===</span> RUN   TestValidateArgs
</span></span><span class="line"><span class="ln">11</span><span class="cl">--- PASS: TestValidateArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">13</span><span class="cl">ok      practical-go/chap01/manual-parse        1.853s</span></span></code></pre></div><p>바이너리 파일을 빌드하고 애플리케이션 실행 테스트도 통과했습니다.
연습 문제를 풀기 전에 작성해 둔 단위 테스트들도 잘 실행되었고요.
모든 요구사항을 만족한 것 같습니다.</p>
<p>여기까지 왔을 때 기분이 꽤 뿌듯했었지요.
그런데 답안 코드를 살펴보고 나니 역시나 제 것은 아주 허술하구나 싶었습니다.
이다음부터는 답안 코드를 분석해 보겠습니다.</p>
<h2 id="답안-코드">답안 코드</h2>
<p>제가 작성한 것과 답안 코드의 차이는 두 가지라고 생각합니다.</p>
<ul>
<li>앱 실행 테스트를 위한 전용 테스트 함수(<code>TestXXXX(t *testing.T)</code>)를 만듦</li>
<li>테스트에 타임아웃 컨텍스트를 추가함</li>
</ul>
<h3 id="앱-실행-테스트도-단위-테스트-중-하나">앱 실행 테스트도 단위 테스트 중 하나</h3>
<p>저는 <code>TestMain()</code> 함수 안에 앱 실행 테스트를 구현했습니다.
그리고 단위 테스트를 따로 실행하도록 했지요.
그래서 Go 언어의 단위 테스트 모음에 앱 실행 테스트는 포함되지 않았습니다.</p>
<p>한편, 답안에는 앱 실행 테스트도 하나의 단위 테스트로 구현되어 있었습니다.</p>
<p>혹시나 그렇게 하면 main함수도 coverage에 포함되나 궁금했습니다.
그래서 실행해본 결과는 &lsquo;포함되지 않는다&rsquo;입니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln">1</span><span class="cl">$ go <span class="nb">test</span> -cover
</span></span><span class="line"><span class="ln">2</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">3</span><span class="cl">coverage: 71.2% of statements
</span></span><span class="line"><span class="ln">4</span><span class="cl">ok      practical-go/chap01/manual-parse        0.262s</span></span></code></pre></div><p>그럼에도 테스트와 준비 과정을 명확히 나눌 수 있는 것은 장점입니다.
훨씬 깔끔해 보입니다.
테스트 도구가 출력하는 PASS/FAIL 결과도 알아서 뽑아주는 것도 좋고요.</p>
<h3 id="타임아웃-컨텍스트를-더해서-우아하게-만들기">타임아웃 컨텍스트를 더해서 우아하게 만들기</h3>
<p>답안 코드는 빌드 과정과 앱 실행 테스트에 타임아웃 컨텍스트를 추가했습니다.
타임아웃 컨텍스트는 교착 상태에 빠지거나 실행이 지연될 때를 위한 장치입니다.
아무리 늦어도 n 시간 안에는 테스트 결과가 나오도록 하는 우아한 방식입니다.</p>
<p>사실 컨텍스트 기능은 책에서 이 연습 문제 이후에 설명된 내용이라 사용해 볼 생각을 못했습니다.
저자가 반칙을 썼네요!
그래도 유용해 보이는 기능을 답안에 사용해 주어서 덕분에 덤으로 배운 느낌입니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="ln">  1</span><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="ln">  2</span><span class="cl">
</span></span><span class="line"><span class="ln">  3</span><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="ln">  4</span><span class="cl">    <span class="s">&#34;bytes&#34;</span>
</span></span><span class="line"><span class="ln">  5</span><span class="cl">    <span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="ln">  6</span><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="ln">  7</span><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="ln">  8</span><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="ln">  9</span><span class="cl">    <span class="s">&#34;os/exec&#34;</span>
</span></span><span class="line"><span class="ln"> 10</span><span class="cl">    <span class="s">&#34;path&#34;</span>
</span></span><span class="line"><span class="ln"> 11</span><span class="cl">    <span class="s">&#34;runtime&#34;</span>
</span></span><span class="line"><span class="ln"> 12</span><span class="cl">    <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="ln"> 13</span><span class="cl">    <span class="s">&#34;testing&#34;</span>
</span></span><span class="line"><span class="ln"> 14</span><span class="cl">    <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="ln"> 15</span><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 16</span><span class="cl">
</span></span><span class="line"><span class="ln"> 17</span><span class="cl"><span class="kd">var</span> <span class="nx">binaryName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 18</span><span class="cl">
</span></span><span class="line"><span class="ln"> 19</span><span class="cl"><span class="kd">func</span> <span class="nf">TestMain</span><span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">M</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 20</span><span class="cl">    <span class="k">if</span> <span class="nx">runtime</span><span class="p">.</span><span class="nx">GOOS</span> <span class="o">==</span> <span class="s">&#34;windows&#34;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 21</span><span class="cl">        <span class="nx">binaryName</span> <span class="p">=</span> <span class="s">&#34;manual-parse-app.exe&#34;</span>
</span></span><span class="line"><span class="ln"> 22</span><span class="cl">    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 23</span><span class="cl">        <span class="nx">binaryName</span> <span class="p">=</span> <span class="s">&#34;manual-parse-app&#34;</span>
</span></span><span class="line"><span class="ln"> 24</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 25</span><span class="cl">
</span></span><span class="line"><span class="ln"> 26</span><span class="cl">    <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 27</span><span class="cl">    <span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 28</span><span class="cl">    <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">CommandContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="s">&#34;go&#34;</span><span class="p">,</span> <span class="s">&#34;build&#34;</span><span class="p">,</span> <span class="s">&#34;-o&#34;</span><span class="p">,</span> <span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 29</span><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 30</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 31</span><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 32</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 33</span><span class="cl">    <span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 34</span><span class="cl">        <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 35</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 36</span><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Error removing built binary: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 37</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 38</span><span class="cl">    <span class="p">}()</span>
</span></span><span class="line"><span class="ln"> 39</span><span class="cl">    <span class="nx">m</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 40</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln"> 41</span><span class="cl">
</span></span><span class="line"><span class="ln"> 42</span><span class="cl"><span class="kd">func</span> <span class="nf">TestApplication</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 43</span><span class="cl">    <span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="mi">500</span><span class="o">*</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 44</span><span class="cl">    <span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 45</span><span class="cl">    <span class="nx">curDir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Getwd</span><span class="p">()</span>
</span></span><span class="line"><span class="ln"> 46</span><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 47</span><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 48</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 49</span><span class="cl">    <span class="nx">binaryPath</span> <span class="o">:=</span> <span class="nx">path</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">curDir</span><span class="p">,</span> <span class="nx">binaryName</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 50</span><span class="cl">    <span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="nx">binaryPath</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 51</span><span class="cl">
</span></span><span class="line"><span class="ln"> 52</span><span class="cl">    <span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 53</span><span class="cl">        <span class="nx">args</span>                <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 54</span><span class="cl">        <span class="nx">input</span>               <span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 55</span><span class="cl">        <span class="nx">expectedOutputLines</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="ln"> 56</span><span class="cl">        <span class="nx">expectedExitCode</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="ln"> 57</span><span class="cl">    <span class="p">}{</span>
</span></span><span class="line"><span class="ln"> 58</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 59</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span>
</span></span><span class="line"><span class="ln"> 60</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 61</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 62</span><span class="cl">                <span class="s">&#34;Invalid number of arguments&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 63</span><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Usage: %s &lt;integer&gt; [-h|-help]&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 64</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 65</span><span class="cl">                <span class="s">&#34;A greeter application which prints the name you entered &lt;integer&gt; number of times.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 66</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 67</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 68</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 69</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 70</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;-h&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 71</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 72</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 73</span><span class="cl">                <span class="s">&#34;Must specify a number greater than 0&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 74</span><span class="cl">                <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;Usage: %s &lt;integer&gt; [-h|-help]&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">),</span>
</span></span><span class="line"><span class="ln"> 75</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 76</span><span class="cl">                <span class="s">&#34;A greeter application which prints the name you entered &lt;integer&gt; number of times.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 77</span><span class="cl">                <span class="s">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 78</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 79</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 80</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 81</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>                <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 82</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span>    <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 83</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{},</span>
</span></span><span class="line"><span class="ln"> 84</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 85</span><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 86</span><span class="cl">            <span class="nx">args</span><span class="p">:</span>             <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;2&#34;</span><span class="p">},</span>
</span></span><span class="line"><span class="ln"> 87</span><span class="cl">            <span class="nx">input</span><span class="p">:</span>            <span class="s">&#34;jane doe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 88</span><span class="cl">            <span class="nx">expectedExitCode</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 89</span><span class="cl">            <span class="nx">expectedOutputLines</span><span class="p">:</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 90</span><span class="cl">                <span class="s">&#34;Your name please? Press the Enter key when done.&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 91</span><span class="cl">                <span class="s">&#34;Nice to meet you jane doe&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln"> 92</span><span class="cl">            <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 93</span><span class="cl">        <span class="p">},</span>
</span></span><span class="line"><span class="ln"> 94</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 95</span><span class="cl">
</span></span><span class="line"><span class="ln"> 96</span><span class="cl">    <span class="nx">byteBuf</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 97</span><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tc</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 98</span><span class="cl">        <span class="nx">t</span><span class="p">.</span><span class="nf">Logf</span><span class="p">(</span><span class="s">&#34;Executing:%v %v\n&#34;</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="ln"> 99</span><span class="cl">        <span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">CommandContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">binaryPath</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">100</span><span class="cl">        <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="nx">byteBuf</span>
</span></span><span class="line"><span class="ln">101</span><span class="cl">        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">input</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">102</span><span class="cl">            <span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdin</span> <span class="p">=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">input</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">103</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">104</span><span class="cl">        <span class="nx">err</span> <span class="o">:=</span> <span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">105</span><span class="cl">
</span></span><span class="line"><span class="ln">106</span><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">107</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected application to exit without an error. Got: %v&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">108</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">109</span><span class="cl">
</span></span><span class="line"><span class="ln">110</span><span class="cl">        <span class="k">if</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">ProcessState</span><span class="p">.</span><span class="nf">ExitCode</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">111</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="nx">byteBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">112</span><span class="cl">            <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected application to have exit code: %v. Got: %v&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedExitCode</span><span class="p">,</span> <span class="nx">cmd</span><span class="p">.</span><span class="nx">ProcessState</span><span class="p">.</span><span class="nf">ExitCode</span><span class="p">())</span>
</span></span><span class="line"><span class="ln">113</span><span class="cl">
</span></span><span class="line"><span class="ln">114</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">115</span><span class="cl">
</span></span><span class="line"><span class="ln">116</span><span class="cl">        <span class="nx">output</span> <span class="o">:=</span> <span class="nx">byteBuf</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">117</span><span class="cl">        <span class="nx">lines</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Split</span><span class="p">(</span><span class="nx">output</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="ln">118</span><span class="cl">        <span class="k">for</span> <span class="nx">num</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">119</span><span class="cl">            <span class="k">if</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span><span class="p">[</span><span class="nx">num</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">120</span><span class="cl">                <span class="nx">t</span><span class="p">.</span><span class="nf">Fatalf</span><span class="p">(</span><span class="s">&#34;Expected output line to be:%v, Got:%v&#34;</span><span class="p">,</span> <span class="nx">tc</span><span class="p">.</span><span class="nx">expectedOutputLines</span><span class="p">[</span><span class="nx">num</span><span class="p">],</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">num</span><span class="p">])</span>
</span></span><span class="line"><span class="ln">121</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">122</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">123</span><span class="cl">        <span class="nx">byteBuf</span><span class="p">.</span><span class="nf">Reset</span><span class="p">()</span>
</span></span><span class="line"><span class="ln">124</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">125</span><span class="cl"><span class="p">}</span></span></span></code></pre></div><h2 id="실행-결과-답안-코드">실행 결과 (답안 코드)</h2>
<p>실행해 보니 예상대로 앱 실행 테스트도 Go 언어의 단위 테스트 중의 하나로 처리되는 것으로 보입니다.
앱 실행 테스트의 경우 테스트 케이스를 실행할 때마다 로그를 남겨두었네요.
어떤 인자와 함께 실행했을 때 에러가 났는지 금방 파악할 수 있는 좋은 습관인 것 같습니다.</p>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="ln"> 1</span><span class="cl">$ go <span class="nb">test</span> -v
</span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="o">===</span> RUN   TestApplication
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    main_test.go:50: /home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[]</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>-h<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>a<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    main_test.go:98: Executing:/home/jaehun/Dev/go-study/practical-go/chap01/manual-parse/manual-parse-app <span class="o">[</span>2<span class="o">]</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">--- PASS: TestApplication <span class="o">(</span>0.01s<span class="o">)</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="o">===</span> RUN   TestParseArgs
</span></span><span class="line"><span class="ln">10</span><span class="cl">--- PASS: TestParseArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl"><span class="o">===</span> RUN   TestRunCmd
</span></span><span class="line"><span class="ln">12</span><span class="cl">--- PASS: TestRunCmd <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl"><span class="o">===</span> RUN   TestValidateArgs
</span></span><span class="line"><span class="ln">14</span><span class="cl">--- PASS: TestValidateArgs <span class="o">(</span>0.00s<span class="o">)</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">PASS
</span></span><span class="line"><span class="ln">16</span><span class="cl">ok      practical-go/chap01/manual-parse        0.239s</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>