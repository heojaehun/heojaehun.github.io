<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C# on 작업실📦상자</title>
    <link>https://heojaehun.github.com/tags/c#/</link>
    <description>Recent content in C# on 작업실📦상자</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Jaehun Heo (CC BY 4.0)</copyright>
    <lastBuildDate>Thu, 17 Dec 2020 00:14:08 +0900</lastBuildDate><atom:link href="https://heojaehun.github.com/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[TIL] 201216</title>
      <link>https://heojaehun.github.com/blog/til_201216/</link>
      <pubDate>Thu, 17 Dec 2020 00:14:08 +0900</pubDate>
      
      <guid>https://heojaehun.github.com/blog/til_201216/</guid>
      <description>C# 마이크로소프트에서 제공하는 C# 소개 대화형 자습서를 체험해보았다.
Hello World 문자열 보간: 문자열이 시작되기 전에 $를 쓰고 문자열 속에서 변수를 {} 기호로 감싼다. 파이썬의 format 1string what = &amp;#34;World; 2Console.WriteLine($&amp;#34;Hello {what}&amp;#34;); C#의 숫자 decimal: double 형보다 범위는 좁으나 표현할 수 있는 소수점 아래의 수가 더 많다. 분배 및 루프 C/C&#43;&#43;의 if~else, while과 같았다. 목록 컬렉션 foreach: 파이썬에서 쓰던 for 문법처럼 쓸 수 있다. 편리하다! List 타입 [책] 개발자의 글쓰기 (p.184 ~ p.</description>
      <content:encoded><![CDATA[<h2 id="c">C#</h2>
<p>마이크로소프트에서 제공하는 <a href="https://docs.microsoft.com/ko-kr/dotnet/csharp/tutorials/">C# 소개 대화형 자습서</a>를 체험해보았다.</p>
<ul>
<li>Hello World
<ul>
<li>문자열 보간: 문자열이 시작되기 전에 <code>$</code>를 쓰고 문자열 속에서 변수를 <code>{}</code> 기호로 감싼다. 파이썬의 format</li>
</ul>
</li>
</ul>





<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="ln">1</span><span class="cl"><span class="kt">string</span> <span class="n">what</span> <span class="p">=</span> <span class="s">&#34;World;
</span></span></span><span class="line"><span class="ln">2</span><span class="cl"><span class="s"></span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">$&#34;Hello {what}&#34;</span><span class="p">);</span></span></span></code></pre></div><ul>
<li>C#의 숫자
<ul>
<li>decimal: double 형보다 범위는 좁으나 표현할 수 있는 소수점 아래의 수가 더 많다.</li>
</ul>
</li>
<li>분배 및 루프
<ul>
<li>C/C++의 if~else, while과 같았다.</li>
</ul>
</li>
<li>목록 컬렉션
<ul>
<li>foreach: 파이썬에서 쓰던 for 문법처럼 쓸 수 있다. 편리하다!</li>
<li>List 타입</li>
</ul>
</li>
</ul>
<h2 id="책-개발자의-글쓰기-p184--p192">[책] 개발자의 글쓰기 (p.184 ~ p.192)</h2>
<h3 id="논증으로-유용한-정보를-제공하기">논증으로 유용한 정보를 제공하기</h3>
<ul>
<li>설명을 하거나 행동을 유도할 때 근거를 제시하면 더 설득력을 가진다.
<ul>
<li>왜 그렇게 해야 하는지, 어떤 일이 일어날 수 있는지 알려주면 좋다.</li>
</ul>
</li>
<li>개발 문서 문체가 너무 공손하면 독자에게 다른 의미로 해석할 수 있는 여지를 주게 된다.
<ul>
<li>~해야 합니다만 반드시 해야 하는 것은 아닙니다.</li>
<li>~하면 좋습니다. 다만 ~한 경우에는 안 해도 무방합니다.</li>
<li>~하지 말아야 합니다. ~한 경우에는 어쩔 수 없으니 넘어가도 됩니다.</li>
<li>~하지 마십시오. 물론 큰 문제는 없습니다.</li>
<li>~할 것을 추천합니다. 혹시 더 좋은 방법이 있을 수도 있습니다.</li>
</ul>
</li>
<li>이런 표현으로 고쳐야 한다.
<ul>
<li>~하십시오.</li>
<li>~하지 마십시오.</li>
</ul>
</li>
<li>주장에 대한 근거는 최대한 가까운 위치에 서술해야 한다.
<ul>
<li>근거를 짧게 서술할 수 없는 양이라면 근거가 있는 위치를 알려주어야 한다.</li>
</ul>
</li>
<li>문제에 대한 답 역시 최대한 가까운 위치에 서술해야 한다.
<ul>
<li>답을 해결해나가는 과정을 처음부터 순서대로 나열하기보다, 답을 우선 적고 그 답에 접근하는 과정을 설명하는 것이 좋다.</li>
<li>접근법을 이미 알고 있는 사람은 답만 알면 되는데 불필요하게 과정을 모두 따라가야 한다.</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>